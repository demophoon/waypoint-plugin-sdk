// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: plugin.proto

package proto

import (
	context "context"
	protostructure "github.com/mitchellh/protostructure"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResourceCategoryDisplayHint int32

const (
	ResourceCategoryDisplayHint_UNKNOWN          ResourceCategoryDisplayHint = 0
	ResourceCategoryDisplayHint_OTHER            ResourceCategoryDisplayHint = 1 // catch-all for types that do not fit well into other predefined roles. i.e. aws target group
	ResourceCategoryDisplayHint_INSTANCE         ResourceCategoryDisplayHint = 2 // i.e. k8s pod, docker container, ecs task
	ResourceCategoryDisplayHint_INSTANCE_MANAGER ResourceCategoryDisplayHint = 3 // i.e. k8s deployment, ec2 asg, nomad job, ecs service
	ResourceCategoryDisplayHint_ROUTER           ResourceCategoryDisplayHint = 4 // i.e. k8s service, aws alb
	ResourceCategoryDisplayHint_POLICY           ResourceCategoryDisplayHint = 5 // i.e. aws security group or iam role, k8s RoleBinding
	ResourceCategoryDisplayHint_CONFIG           ResourceCategoryDisplayHint = 6 // i.e. aws launch config, k8s configmap
	ResourceCategoryDisplayHint_FUNCTION         ResourceCategoryDisplayHint = 7 // i.e. lambda function, azure function
	ResourceCategoryDisplayHint_STORAGE          ResourceCategoryDisplayHint = 8 // i.e. EBS volume, EFS filesystem, k8s PVC
)

// Enum value maps for ResourceCategoryDisplayHint.
var (
	ResourceCategoryDisplayHint_name = map[int32]string{
		0: "UNKNOWN",
		1: "OTHER",
		2: "INSTANCE",
		3: "INSTANCE_MANAGER",
		4: "ROUTER",
		5: "POLICY",
		6: "CONFIG",
		7: "FUNCTION",
		8: "STORAGE",
	}
	ResourceCategoryDisplayHint_value = map[string]int32{
		"UNKNOWN":          0,
		"OTHER":            1,
		"INSTANCE":         2,
		"INSTANCE_MANAGER": 3,
		"ROUTER":           4,
		"POLICY":           5,
		"CONFIG":           6,
		"FUNCTION":         7,
		"STORAGE":          8,
	}
)

func (x ResourceCategoryDisplayHint) Enum() *ResourceCategoryDisplayHint {
	p := new(ResourceCategoryDisplayHint)
	*p = x
	return p
}

func (x ResourceCategoryDisplayHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceCategoryDisplayHint) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_proto_enumTypes[0].Descriptor()
}

func (ResourceCategoryDisplayHint) Type() protoreflect.EnumType {
	return &file_plugin_proto_enumTypes[0]
}

func (x ResourceCategoryDisplayHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceCategoryDisplayHint.Descriptor instead.
func (ResourceCategoryDisplayHint) EnumDescriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0}
}

// PrimitiveType are the types of primitives we support. The enum
// value must exactly match the Go reflect.Kind enum value.
type FuncSpec_Value_PrimitiveType int32

const (
	FuncSpec_Value_INVALID FuncSpec_Value_PrimitiveType = 0
	FuncSpec_Value_BOOL    FuncSpec_Value_PrimitiveType = 1
	FuncSpec_Value_INT     FuncSpec_Value_PrimitiveType = 2
	FuncSpec_Value_INT8    FuncSpec_Value_PrimitiveType = 3
	FuncSpec_Value_INT16   FuncSpec_Value_PrimitiveType = 4
	FuncSpec_Value_INT32   FuncSpec_Value_PrimitiveType = 5
	FuncSpec_Value_INT64   FuncSpec_Value_PrimitiveType = 6
	FuncSpec_Value_UINT    FuncSpec_Value_PrimitiveType = 7
	FuncSpec_Value_UINT8   FuncSpec_Value_PrimitiveType = 8
	FuncSpec_Value_UINT16  FuncSpec_Value_PrimitiveType = 9
	FuncSpec_Value_UINT32  FuncSpec_Value_PrimitiveType = 10
	FuncSpec_Value_UINT64  FuncSpec_Value_PrimitiveType = 11
	FuncSpec_Value_STRING  FuncSpec_Value_PrimitiveType = 24
)

// Enum value maps for FuncSpec_Value_PrimitiveType.
var (
	FuncSpec_Value_PrimitiveType_name = map[int32]string{
		0:  "INVALID",
		1:  "BOOL",
		2:  "INT",
		3:  "INT8",
		4:  "INT16",
		5:  "INT32",
		6:  "INT64",
		7:  "UINT",
		8:  "UINT8",
		9:  "UINT16",
		10: "UINT32",
		11: "UINT64",
		24: "STRING",
	}
	FuncSpec_Value_PrimitiveType_value = map[string]int32{
		"INVALID": 0,
		"BOOL":    1,
		"INT":     2,
		"INT8":    3,
		"INT16":   4,
		"INT32":   5,
		"INT64":   6,
		"UINT":    7,
		"UINT8":   8,
		"UINT16":  9,
		"UINT32":  10,
		"UINT64":  11,
		"STRING":  24,
	}
)

func (x FuncSpec_Value_PrimitiveType) Enum() *FuncSpec_Value_PrimitiveType {
	p := new(FuncSpec_Value_PrimitiveType)
	*p = x
	return p
}

func (x FuncSpec_Value_PrimitiveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FuncSpec_Value_PrimitiveType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_proto_enumTypes[1].Descriptor()
}

func (FuncSpec_Value_PrimitiveType) Type() protoreflect.EnumType {
	return &file_plugin_proto_enumTypes[1]
}

func (x FuncSpec_Value_PrimitiveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FuncSpec_Value_PrimitiveType.Descriptor instead.
func (FuncSpec_Value_PrimitiveType) EnumDescriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{1, 0, 0}
}

// the state of overall health of a deployed application
type StatusReport_Health int32

const (
	StatusReport_UNKNOWN StatusReport_Health = 0
	StatusReport_ALIVE   StatusReport_Health = 1
	StatusReport_READY   StatusReport_Health = 2
	StatusReport_DOWN    StatusReport_Health = 3
	StatusReport_MISSING StatusReport_Health = 5 // We're expecting it to exist, but it does not.
	StatusReport_PARTIAL StatusReport_Health = 4 // Some resources in deployment are OK, others are not OK
)

// Enum value maps for StatusReport_Health.
var (
	StatusReport_Health_name = map[int32]string{
		0: "UNKNOWN",
		1: "ALIVE",
		2: "READY",
		3: "DOWN",
		5: "MISSING",
		4: "PARTIAL",
	}
	StatusReport_Health_value = map[string]int32{
		"UNKNOWN": 0,
		"ALIVE":   1,
		"READY":   2,
		"DOWN":    3,
		"MISSING": 5,
		"PARTIAL": 4,
	}
)

func (x StatusReport_Health) Enum() *StatusReport_Health {
	p := new(StatusReport_Health)
	*p = x
	return p
}

func (x StatusReport_Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusReport_Health) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_proto_enumTypes[2].Descriptor()
}

func (StatusReport_Health) Type() protoreflect.EnumType {
	return &file_plugin_proto_enumTypes[2]
}

func (x StatusReport_Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusReport_Health.Descriptor instead.
func (StatusReport_Health) EnumDescriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{8, 0}
}

// Args are the common argument types that are available to many of the
// dynamic functions. The exact list of available argument types is available
// on the Go interface docs.
type Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Args) Reset() {
	*x = Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args) ProtoMessage() {}

func (x *Args) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args.ProtoReflect.Descriptor instead.
func (*Args) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0}
}

// FuncSpec describes a function and is used by the dependency-injection
// framework to provide the function with the proper values.
//
// Value types are specified using strings. Built-in framework types
// are defined via constants in the `sdk` package. For custom types, you
// can use whatever string as long as it is unique. We recommend using a
// unique prefix plus the Go type name.
type FuncSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the function. This is used for improved logging.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// args is the list of arguments by protobuf Any types.
	Args []*FuncSpec_Value `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// result are the resulting types that are made available. This is only
	// critically important to be set for functions that may chain to other
	// functions. It can be set to blank in which case it will not be used.
	Result []*FuncSpec_Value `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *FuncSpec) Reset() {
	*x = FuncSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncSpec) ProtoMessage() {}

func (x *FuncSpec) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncSpec.ProtoReflect.Descriptor instead.
func (*FuncSpec) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *FuncSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FuncSpec) GetArgs() []*FuncSpec_Value {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *FuncSpec) GetResult() []*FuncSpec_Value {
	if x != nil {
		return x.Result
	}
	return nil
}

// Config is the namespace of messages related to configuration.
//
// All components that take configuration are expected to have two RPC calls:
//
//   * ConfigStruct - Returns the configuration structure.
//   * Configure - Sends the configuration data back to the plugin and the
//       plugin is also expected to perform any validation at this stage.
//   * Documentation - Returns a Documentation struct that details what configuration
//       is accepted, with documentation.
//
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{2}
}

// Auth is the namespace of messages related to auth.
type Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Auth) Reset() {
	*x = Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{3}
}

type Generation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Generation) Reset() {
	*x = Generation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Generation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Generation) ProtoMessage() {}

func (x *Generation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Generation.ProtoReflect.Descriptor instead.
func (*Generation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{4}
}

// ImplementsResp returns true if the component implements an additional interface.
type ImplementsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Implements bool `protobuf:"varint,1,opt,name=implements,proto3" json:"implements,omitempty"`
}

func (x *ImplementsResp) Reset() {
	*x = ImplementsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementsResp) ProtoMessage() {}

func (x *ImplementsResp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementsResp.ProtoReflect.Descriptor instead.
func (*ImplementsResp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *ImplementsResp) GetImplements() bool {
	if x != nil {
		return x.Implements
	}
	return false
}

type Framework struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Framework) Reset() {
	*x = Framework{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Framework) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framework) ProtoMessage() {}

func (x *Framework) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framework.ProtoReflect.Descriptor instead.
func (*Framework) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{6}
}

// Ref contains shared messages used for references to other resources.
//
// Refs should be used when the full type shouldn't be embedded in the message.
type Ref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Ref) Reset() {
	*x = Ref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref) ProtoMessage() {}

func (x *Ref) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref.ProtoReflect.Descriptor instead.
func (*Ref) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{7}
}

// StatusReport is the report genrated when querying the overall health of
// a deployed or released application. This report can be either generated
// by querying the platform itself which has performed the health checks,
// or by Waypoint running user-defined health checks.
type StatusReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a collection of resources for a deployed application
	Resources []*StatusReport_Resource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	// the current overall health state for a deployment
	Health StatusReport_Health `protobuf:"varint,2,opt,name=health,proto3,enum=hashicorp.waypoint.sdk.StatusReport_Health" json:"health,omitempty"`
	// a simple human readable message detailing the Health state
	HealthMessage string `protobuf:"bytes,3,opt,name=health_message,json=healthMessage,proto3" json:"health_message,omitempty"`
	// the time when this report was generated
	GeneratedTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=generated_time,json=generatedTime,proto3" json:"generated_time,omitempty"`
	// where the health check was performed. External means not executed by Waypoint,
	// but by the platform deployed to.
	External bool `protobuf:"varint,5,opt,name=external,proto3" json:"external,omitempty"`
}

func (x *StatusReport) Reset() {
	*x = StatusReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReport) ProtoMessage() {}

func (x *StatusReport) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReport.ProtoReflect.Descriptor instead.
func (*StatusReport) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *StatusReport) GetResources() []*StatusReport_Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *StatusReport) GetHealth() StatusReport_Health {
	if x != nil {
		return x.Health
	}
	return StatusReport_UNKNOWN
}

func (x *StatusReport) GetHealthMessage() string {
	if x != nil {
		return x.HealthMessage
	}
	return ""
}

func (x *StatusReport) GetGeneratedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedTime
	}
	return nil
}

func (x *StatusReport) GetExternal() bool {
	if x != nil {
		return x.External
	}
	return false
}

type WindowSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Width  uint32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
}

func (x *WindowSize) Reset() {
	*x = WindowSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowSize) ProtoMessage() {}

func (x *WindowSize) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowSize.ProtoReflect.Descriptor instead.
func (*WindowSize) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{9}
}

func (x *WindowSize) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *WindowSize) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

type ExecSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExecSession) Reset() {
	*x = ExecSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecSession) ProtoMessage() {}

func (x *ExecSession) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecSession.ProtoReflect.Descriptor instead.
func (*ExecSession) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{10}
}

// Returned by Exec plugin functions to indicate the status of the executed
// command.
type ExecResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode int32 `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
}

func (x *ExecResult) Reset() {
	*x = ExecResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecResult) ProtoMessage() {}

func (x *ExecResult) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecResult.ProtoReflect.Descriptor instead.
func (*ExecResult) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{11}
}

func (x *ExecResult) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

type Logs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Logs) Reset() {
	*x = Logs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logs) ProtoMessage() {}

func (x *Logs) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logs.ProtoReflect.Descriptor instead.
func (*Logs) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{12}
}

type TerminalUI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminalUI) Reset() {
	*x = TerminalUI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI) ProtoMessage() {}

func (x *TerminalUI) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI.ProtoReflect.Descriptor instead.
func (*TerminalUI) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13}
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{14}
}

type Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Build) Reset() {
	*x = Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{15}
}

type DefaultReleaser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DefaultReleaser) Reset() {
	*x = DefaultReleaser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultReleaser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultReleaser) ProtoMessage() {}

func (x *DefaultReleaser) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultReleaser.ProtoReflect.Descriptor instead.
func (*DefaultReleaser) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{16}
}

type Deploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url is the URL provided by the plugin used to reach this deployment
	// note that not all the plugins are able to return a meaningful
	// entry here. In such cases, the best option is to leave this
	// field empty and let the URL service (Hashicorp Horizon) provide
	// an URL.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Deploy) Reset() {
	*x = Deploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deploy) ProtoMessage() {}

func (x *Deploy) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deploy.ProtoReflect.Descriptor instead.
func (*Deploy) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{17}
}

func (x *Deploy) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// A platform resource that an operation (release/deployment) has created, depends on, or manages.
type DeclaredResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name name for the resource. Usually derived from the platform. Required.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// platform-specific type of the resource type. i.e. instance, pod, auto-scaling group, etc
	Type string `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	// The platform on which the resource should exist, i.e. docker, gcp, k8s, etc.
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// Internal ResourceManager representation of the resource.
	State *anypb.Any `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Any additional information a plugin wants to expose on this resource.
	// EX: Availability zones on a load balancer, concurrency limit on a lambda function, etc.
	StateJson string `protobuf:"bytes,4,opt,name=state_json,json=stateJson,proto3" json:"state_json,omitempty"`
	// high level type of the resource, used for display purposes.
	CategoryDisplayHint ResourceCategoryDisplayHint `protobuf:"varint,5,opt,name=category_display_hint,json=categoryDisplayHint,proto3,enum=hashicorp.waypoint.sdk.ResourceCategoryDisplayHint" json:"category_display_hint,omitempty"`
}

func (x *DeclaredResource) Reset() {
	*x = DeclaredResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclaredResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclaredResource) ProtoMessage() {}

func (x *DeclaredResource) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclaredResource.ProtoReflect.Descriptor instead.
func (*DeclaredResource) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{18}
}

func (x *DeclaredResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeclaredResource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeclaredResource) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *DeclaredResource) GetState() *anypb.Any {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *DeclaredResource) GetStateJson() string {
	if x != nil {
		return x.StateJson
	}
	return ""
}

func (x *DeclaredResource) GetCategoryDisplayHint() ResourceCategoryDisplayHint {
	if x != nil {
		return x.CategoryDisplayHint
	}
	return ResourceCategoryDisplayHint_UNKNOWN
}

type DeclaredResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*DeclaredResource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *DeclaredResources) Reset() {
	*x = DeclaredResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclaredResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclaredResources) ProtoMessage() {}

func (x *DeclaredResources) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclaredResources.ProtoReflect.Descriptor instead.
func (*DeclaredResources) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{19}
}

func (x *DeclaredResources) GetResources() []*DeclaredResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type Push struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Push) Reset() {
	*x = Push{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Push) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Push) ProtoMessage() {}

func (x *Push) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Push.ProtoReflect.Descriptor instead.
func (*Push) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{20}
}

// Access is returned by Registry.Access as the return value for the plugin's
// return value from the AccessInfoFunc call.
type Access struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Access) Reset() {
	*x = Access{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Access) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Access) ProtoMessage() {}

func (x *Access) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Access.ProtoReflect.Descriptor instead.
func (*Access) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{21}
}

type Release struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Release) Reset() {
	*x = Release{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release) ProtoMessage() {}

func (x *Release) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release.ProtoReflect.Descriptor instead.
func (*Release) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{22}
}

func (x *Release) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ConfigSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigSource) Reset() {
	*x = ConfigSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSource) ProtoMessage() {}

func (x *ConfigSource) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSource.ProtoReflect.Descriptor instead.
func (*ConfigSource) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{23}
}

type TaskLaunch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskLaunch) Reset() {
	*x = TaskLaunch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLaunch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLaunch) ProtoMessage() {}

func (x *TaskLaunch) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLaunch.ProtoReflect.Descriptor instead.
func (*TaskLaunch) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{24}
}

// See component.Source
type Args_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// app is the name of the application being deployed.
	App string `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	// path is the absolute directory path to the root directory for source files.
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Args_Source) Reset() {
	*x = Args_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_Source) ProtoMessage() {}

func (x *Args_Source) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_Source.ProtoReflect.Descriptor instead.
func (*Args_Source) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Args_Source) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *Args_Source) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// See component.JobInfo
type Args_JobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Local     bool   `protobuf:"varint,1,opt,name=local,proto3" json:"local,omitempty"`
	Workspace string `protobuf:"bytes,2,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Id        string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Project   string `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
	App       string `protobuf:"bytes,5,opt,name=app,proto3" json:"app,omitempty"`
}

func (x *Args_JobInfo) Reset() {
	*x = Args_JobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_JobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_JobInfo) ProtoMessage() {}

func (x *Args_JobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_JobInfo.ProtoReflect.Descriptor instead.
func (*Args_JobInfo) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Args_JobInfo) GetLocal() bool {
	if x != nil {
		return x.Local
	}
	return false
}

func (x *Args_JobInfo) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *Args_JobInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Args_JobInfo) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Args_JobInfo) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

// See component.DeploymentConfig
type Args_DeploymentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ServerAddr            string `protobuf:"bytes,2,opt,name=server_addr,json=serverAddr,proto3" json:"server_addr,omitempty"`
	ServerTls             bool   `protobuf:"varint,3,opt,name=server_tls,json=serverTls,proto3" json:"server_tls,omitempty"`
	ServerTlsSkipVerify   bool   `protobuf:"varint,4,opt,name=server_tls_skip_verify,json=serverTlsSkipVerify,proto3" json:"server_tls_skip_verify,omitempty"`
	EntrypointInviteToken string `protobuf:"bytes,5,opt,name=entrypoint_invite_token,json=entrypointInviteToken,proto3" json:"entrypoint_invite_token,omitempty"`
	Sequence              uint32 `protobuf:"varint,6,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *Args_DeploymentConfig) Reset() {
	*x = Args_DeploymentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_DeploymentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_DeploymentConfig) ProtoMessage() {}

func (x *Args_DeploymentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_DeploymentConfig.ProtoReflect.Descriptor instead.
func (*Args_DeploymentConfig) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Args_DeploymentConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Args_DeploymentConfig) GetServerAddr() string {
	if x != nil {
		return x.ServerAddr
	}
	return ""
}

func (x *Args_DeploymentConfig) GetServerTls() bool {
	if x != nil {
		return x.ServerTls
	}
	return false
}

func (x *Args_DeploymentConfig) GetServerTlsSkipVerify() bool {
	if x != nil {
		return x.ServerTlsSkipVerify
	}
	return false
}

func (x *Args_DeploymentConfig) GetEntrypointInviteToken() string {
	if x != nil {
		return x.EntrypointInviteToken
	}
	return ""
}

func (x *Args_DeploymentConfig) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// DataDir represents the directory where data can be stored. This is an internal
// struct and shouldn't be used directly. Use the relevant *datadir implementation
// instead.
type Args_DataDir struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Args_DataDir) Reset() {
	*x = Args_DataDir{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_DataDir) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_DataDir) ProtoMessage() {}

func (x *Args_DataDir) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_DataDir.ProtoReflect.Descriptor instead.
func (*Args_DataDir) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 3}
}

// Logger is used to construct an logger for the plugin.
type Args_Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the logger
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Args_Logger) Reset() {
	*x = Args_Logger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_Logger) ProtoMessage() {}

func (x *Args_Logger) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_Logger.ProtoReflect.Descriptor instead.
func (*Args_Logger) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 4}
}

func (x *Args_Logger) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// TerminalUI is used to construct the terminal.UI for the plugin.
type Args_TerminalUI struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId uint32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *Args_TerminalUI) Reset() {
	*x = Args_TerminalUI{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_TerminalUI) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_TerminalUI) ProtoMessage() {}

func (x *Args_TerminalUI) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_TerminalUI.ProtoReflect.Descriptor instead.
func (*Args_TerminalUI) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 5}
}

func (x *Args_TerminalUI) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

// ReleaseTargets is the set of targets for a release operation.
type Args_ReleaseTargets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of targets for a release. This is always guaranteed by
	// the caller to sum to 100%. If the release component doesn't support
	// traffic splitting, this is guaranteed to always be length 1.
	Targets []*Args_ReleaseTargets_Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
}

func (x *Args_ReleaseTargets) Reset() {
	*x = Args_ReleaseTargets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_ReleaseTargets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_ReleaseTargets) ProtoMessage() {}

func (x *Args_ReleaseTargets) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_ReleaseTargets.ProtoReflect.Descriptor instead.
func (*Args_ReleaseTargets) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 6}
}

func (x *Args_ReleaseTargets) GetTargets() []*Args_ReleaseTargets_Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

// LabelSet is a set of labels for anything that can be labeled, such
// as a deployment, build, etc.
type Args_LabelSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Labels map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Args_LabelSet) Reset() {
	*x = Args_LabelSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_LabelSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_LabelSet) ProtoMessage() {}

func (x *Args_LabelSet) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_LabelSet.ProtoReflect.Descriptor instead.
func (*Args_LabelSet) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 7}
}

func (x *Args_LabelSet) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// ExecSessionInfo is used to send the information about an exec plugin
// session.
type Args_ExecSessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bidirectional usd for stdin and stdout
	StreamId uint32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	// The arguments to the command (includes the command itself)
	Args []string `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// Indicate if the client is expecting a TTY
	IsTty bool `protobuf:"varint,3,opt,name=is_tty,json=isTty,proto3" json:"is_tty,omitempty"`
	// The size of the window on start, if is_tty is true
	InitialWindow *WindowSize `protobuf:"bytes,4,opt,name=initial_window,json=initialWindow,proto3" json:"initial_window,omitempty"`
	// The value of the TERM environment variable, if is_tty is true
	TermType string `protobuf:"bytes,5,opt,name=term_type,json=termType,proto3" json:"term_type,omitempty"`
	// The environment variables to set in the context
	Env []string `protobuf:"bytes,6,rep,name=env,proto3" json:"env,omitempty"`
}

func (x *Args_ExecSessionInfo) Reset() {
	*x = Args_ExecSessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_ExecSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_ExecSessionInfo) ProtoMessage() {}

func (x *Args_ExecSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_ExecSessionInfo.ProtoReflect.Descriptor instead.
func (*Args_ExecSessionInfo) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 8}
}

func (x *Args_ExecSessionInfo) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *Args_ExecSessionInfo) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Args_ExecSessionInfo) GetIsTty() bool {
	if x != nil {
		return x.IsTty
	}
	return false
}

func (x *Args_ExecSessionInfo) GetInitialWindow() *WindowSize {
	if x != nil {
		return x.InitialWindow
	}
	return nil
}

func (x *Args_ExecSessionInfo) GetTermType() string {
	if x != nil {
		return x.TermType
	}
	return ""
}

func (x *Args_ExecSessionInfo) GetEnv() []string {
	if x != nil {
		return x.Env
	}
	return nil
}

type Args_LogViewer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId   uint32                 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	StartingAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=starting_at,json=startingAt,proto3" json:"starting_at,omitempty"`
	Limit      uint32                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *Args_LogViewer) Reset() {
	*x = Args_LogViewer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_LogViewer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_LogViewer) ProtoMessage() {}

func (x *Args_LogViewer) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_LogViewer.ProtoReflect.Descriptor instead.
func (*Args_LogViewer) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 9}
}

func (x *Args_LogViewer) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *Args_LogViewer) GetStartingAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartingAt
	}
	return nil
}

func (x *Args_LogViewer) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type Args_TaskLaunchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The OCI image to launch for the batch task.
	OciUrl string `protobuf:"bytes,1,opt,name=oci_url,json=ociUrl,proto3" json:"oci_url,omitempty"`
	// The environment variable that will be exposed to the task.
	EnvironmentVariables map[string]string `protobuf:"bytes,2,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Entrypoint override for the OCI image.
	Entrypoint []string `protobuf:"bytes,4,rep,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	// The arguments that will be passed to the new container on boot.
	Arguments []string `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Args_TaskLaunchInfo) Reset() {
	*x = Args_TaskLaunchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_TaskLaunchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_TaskLaunchInfo) ProtoMessage() {}

func (x *Args_TaskLaunchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_TaskLaunchInfo.ProtoReflect.Descriptor instead.
func (*Args_TaskLaunchInfo) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 10}
}

func (x *Args_TaskLaunchInfo) GetOciUrl() string {
	if x != nil {
		return x.OciUrl
	}
	return ""
}

func (x *Args_TaskLaunchInfo) GetEnvironmentVariables() map[string]string {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *Args_TaskLaunchInfo) GetEntrypoint() []string {
	if x != nil {
		return x.Entrypoint
	}
	return nil
}

func (x *Args_TaskLaunchInfo) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type Args_DataDir_Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheDir string `protobuf:"bytes,2,opt,name=cache_dir,json=cacheDir,proto3" json:"cache_dir,omitempty"`
	DataDir  string `protobuf:"bytes,3,opt,name=data_dir,json=dataDir,proto3" json:"data_dir,omitempty"`
}

func (x *Args_DataDir_Project) Reset() {
	*x = Args_DataDir_Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_DataDir_Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_DataDir_Project) ProtoMessage() {}

func (x *Args_DataDir_Project) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_DataDir_Project.ProtoReflect.Descriptor instead.
func (*Args_DataDir_Project) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *Args_DataDir_Project) GetCacheDir() string {
	if x != nil {
		return x.CacheDir
	}
	return ""
}

func (x *Args_DataDir_Project) GetDataDir() string {
	if x != nil {
		return x.DataDir
	}
	return ""
}

type Args_DataDir_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheDir string `protobuf:"bytes,2,opt,name=cache_dir,json=cacheDir,proto3" json:"cache_dir,omitempty"`
	DataDir  string `protobuf:"bytes,3,opt,name=data_dir,json=dataDir,proto3" json:"data_dir,omitempty"`
}

func (x *Args_DataDir_App) Reset() {
	*x = Args_DataDir_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_DataDir_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_DataDir_App) ProtoMessage() {}

func (x *Args_DataDir_App) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_DataDir_App.ProtoReflect.Descriptor instead.
func (*Args_DataDir_App) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *Args_DataDir_App) GetCacheDir() string {
	if x != nil {
		return x.CacheDir
	}
	return ""
}

func (x *Args_DataDir_App) GetDataDir() string {
	if x != nil {
		return x.DataDir
	}
	return ""
}

type Args_DataDir_Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheDir string `protobuf:"bytes,2,opt,name=cache_dir,json=cacheDir,proto3" json:"cache_dir,omitempty"`
	DataDir  string `protobuf:"bytes,3,opt,name=data_dir,json=dataDir,proto3" json:"data_dir,omitempty"`
}

func (x *Args_DataDir_Component) Reset() {
	*x = Args_DataDir_Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_DataDir_Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_DataDir_Component) ProtoMessage() {}

func (x *Args_DataDir_Component) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_DataDir_Component.ProtoReflect.Descriptor instead.
func (*Args_DataDir_Component) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *Args_DataDir_Component) GetCacheDir() string {
	if x != nil {
		return x.CacheDir
	}
	return ""
}

func (x *Args_DataDir_Component) GetDataDir() string {
	if x != nil {
		return x.DataDir
	}
	return ""
}

// Target is a single target for releasing.
type Args_ReleaseTargets_Target struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *anypb.Any `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	Percent    uint32     `protobuf:"varint,2,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (x *Args_ReleaseTargets_Target) Reset() {
	*x = Args_ReleaseTargets_Target{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Args_ReleaseTargets_Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Args_ReleaseTargets_Target) ProtoMessage() {}

func (x *Args_ReleaseTargets_Target) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Args_ReleaseTargets_Target.ProtoReflect.Descriptor instead.
func (*Args_ReleaseTargets_Target) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *Args_ReleaseTargets_Target) GetDeployment() *anypb.Any {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Args_ReleaseTargets_Target) GetPercent() uint32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type FuncSpec_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of the argument. This may be empty for typed arguments.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is the type of the argument. All arguments encoded using *any.Any
	// specify the proto Any message type and not a language-specific type.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// primitive_type is set to a non-zero if the type is NOT an *any.Any.
	PrimitiveType FuncSpec_Value_PrimitiveType `protobuf:"varint,4,opt,name=primitive_type,json=primitiveType,proto3,enum=hashicorp.waypoint.sdk.FuncSpec_Value_PrimitiveType" json:"primitive_type,omitempty"`
	// value for this Value. This is only set for Args and has no impact on specs.
	// This value MUST match the type or primitive_type fields.
	//
	// Types that are assignable to Value:
	//	*FuncSpec_Value_ProtoAny
	//	*FuncSpec_Value_Bool
	//	*FuncSpec_Value_Int
	//	*FuncSpec_Value_Uint
	//	*FuncSpec_Value_String_
	Value isFuncSpec_Value_Value `protobuf_oneof:"value"`
}

func (x *FuncSpec_Value) Reset() {
	*x = FuncSpec_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncSpec_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncSpec_Value) ProtoMessage() {}

func (x *FuncSpec_Value) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncSpec_Value.ProtoReflect.Descriptor instead.
func (*FuncSpec_Value) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{1, 0}
}

func (x *FuncSpec_Value) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FuncSpec_Value) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *FuncSpec_Value) GetPrimitiveType() FuncSpec_Value_PrimitiveType {
	if x != nil {
		return x.PrimitiveType
	}
	return FuncSpec_Value_INVALID
}

func (m *FuncSpec_Value) GetValue() isFuncSpec_Value_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FuncSpec_Value) GetProtoAny() *anypb.Any {
	if x, ok := x.GetValue().(*FuncSpec_Value_ProtoAny); ok {
		return x.ProtoAny
	}
	return nil
}

func (x *FuncSpec_Value) GetBool() bool {
	if x, ok := x.GetValue().(*FuncSpec_Value_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *FuncSpec_Value) GetInt() int64 {
	if x, ok := x.GetValue().(*FuncSpec_Value_Int); ok {
		return x.Int
	}
	return 0
}

func (x *FuncSpec_Value) GetUint() uint64 {
	if x, ok := x.GetValue().(*FuncSpec_Value_Uint); ok {
		return x.Uint
	}
	return 0
}

func (x *FuncSpec_Value) GetString_() string {
	if x, ok := x.GetValue().(*FuncSpec_Value_String_); ok {
		return x.String_
	}
	return ""
}

type isFuncSpec_Value_Value interface {
	isFuncSpec_Value_Value()
}

type FuncSpec_Value_ProtoAny struct {
	// proto is set if the value is a protobuf message.
	ProtoAny *anypb.Any `protobuf:"bytes,3,opt,name=proto_any,json=protoAny,proto3,oneof"`
}

type FuncSpec_Value_Bool struct {
	// Primitive values below
	Bool bool `protobuf:"varint,5,opt,name=bool,proto3,oneof"`
}

type FuncSpec_Value_Int struct {
	Int int64 `protobuf:"varint,6,opt,name=int,proto3,oneof"` // all sizes up to 64-bit
}

type FuncSpec_Value_Uint struct {
	Uint uint64 `protobuf:"varint,7,opt,name=uint,proto3,oneof"` // all sizes up to 64-bit
}

type FuncSpec_Value_String_ struct {
	String_ string `protobuf:"bytes,8,opt,name=string,proto3,oneof"`
}

func (*FuncSpec_Value_ProtoAny) isFuncSpec_Value_Value() {}

func (*FuncSpec_Value_Bool) isFuncSpec_Value_Value() {}

func (*FuncSpec_Value_Int) isFuncSpec_Value_Value() {}

func (*FuncSpec_Value_Uint) isFuncSpec_Value_Value() {}

func (*FuncSpec_Value_String_) isFuncSpec_Value_Value() {}

// Args is the standard argument type for an RPC that is calling a FuncSpec.
type FuncSpec_Args struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// args is the list of arguments. This will include some of the
	// standard types in this file (in the Args message namespace) as well
	// as custom types declared by the FuncSpec that the plugin is expected
	// to understand how to decode.
	Args []*FuncSpec_Value `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *FuncSpec_Args) Reset() {
	*x = FuncSpec_Args{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncSpec_Args) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncSpec_Args) ProtoMessage() {}

func (x *FuncSpec_Args) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncSpec_Args.ProtoReflect.Descriptor instead.
func (*FuncSpec_Args) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{1, 1}
}

func (x *FuncSpec_Args) GetArgs() []*FuncSpec_Value {
	if x != nil {
		return x.Args
	}
	return nil
}

// ConfigureRequest is the request sent once the configuration decoding
// is complete to actually assign the values to the structure.
type Config_ConfigureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// json is the json data for the structure returned in the StructResp.
	// It is guaranteed to decode cleanly into the target structure.
	Json []byte `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Config_ConfigureRequest) Reset() {
	*x = Config_ConfigureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_ConfigureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_ConfigureRequest) ProtoMessage() {}

func (x *Config_ConfigureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_ConfigureRequest.ProtoReflect.Descriptor instead.
func (*Config_ConfigureRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Config_ConfigureRequest) GetJson() []byte {
	if x != nil {
		return x.Json
	}
	return nil
}

// StructResp returns the struct for configuration.
type Config_StructResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// struct is the configuration structure (or empty/nil if one doesn't exist).
	// This struct should have all the proper struct tags for HCL decoding
	// You should do validation on the Configure call.
	Struct *protostructure.Struct `protobuf:"bytes,1,opt,name=struct,proto3" json:"struct,omitempty"`
}

func (x *Config_StructResp) Reset() {
	*x = Config_StructResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_StructResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_StructResp) ProtoMessage() {}

func (x *Config_StructResp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_StructResp.ProtoReflect.Descriptor instead.
func (*Config_StructResp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Config_StructResp) GetStruct() *protostructure.Struct {
	if x != nil {
		return x.Struct
	}
	return nil
}

type Config_FieldDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string                       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Synopsis  string                       `protobuf:"bytes,2,opt,name=synopsis,proto3" json:"synopsis,omitempty"`
	Summary   string                       `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	Optional  bool                         `protobuf:"varint,4,opt,name=optional,proto3" json:"optional,omitempty"`
	EnvVar    string                       `protobuf:"bytes,5,opt,name=env_var,json=envVar,proto3" json:"env_var,omitempty"`
	Type      string                       `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Default   string                       `protobuf:"bytes,7,opt,name=default,proto3" json:"default,omitempty"`
	Category  bool                         `protobuf:"varint,8,opt,name=category,proto3" json:"category,omitempty"`
	SubFields []*Config_FieldDocumentation `protobuf:"bytes,9,rep,name=sub_fields,json=subFields,proto3" json:"sub_fields,omitempty"`
}

func (x *Config_FieldDocumentation) Reset() {
	*x = Config_FieldDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_FieldDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_FieldDocumentation) ProtoMessage() {}

func (x *Config_FieldDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_FieldDocumentation.ProtoReflect.Descriptor instead.
func (*Config_FieldDocumentation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Config_FieldDocumentation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Config_FieldDocumentation) GetSynopsis() string {
	if x != nil {
		return x.Synopsis
	}
	return ""
}

func (x *Config_FieldDocumentation) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Config_FieldDocumentation) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *Config_FieldDocumentation) GetEnvVar() string {
	if x != nil {
		return x.EnvVar
	}
	return ""
}

func (x *Config_FieldDocumentation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Config_FieldDocumentation) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *Config_FieldDocumentation) GetCategory() bool {
	if x != nil {
		return x.Category
	}
	return false
}

func (x *Config_FieldDocumentation) GetSubFields() []*Config_FieldDocumentation {
	if x != nil {
		return x.SubFields
	}
	return nil
}

type Config_MapperDocumentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input       string `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output      string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Config_MapperDocumentation) Reset() {
	*x = Config_MapperDocumentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_MapperDocumentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_MapperDocumentation) ProtoMessage() {}

func (x *Config_MapperDocumentation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_MapperDocumentation.ProtoReflect.Descriptor instead.
func (*Config_MapperDocumentation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Config_MapperDocumentation) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *Config_MapperDocumentation) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *Config_MapperDocumentation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Config_Documentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description    string                                `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Example        string                                `protobuf:"bytes,2,opt,name=example,proto3" json:"example,omitempty"`
	Input          string                                `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	Output         string                                `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	Fields         map[string]*Config_FieldDocumentation `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TemplateFields map[string]*Config_FieldDocumentation `protobuf:"bytes,7,rep,name=template_fields,json=templateFields,proto3" json:"template_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequestFields  map[string]*Config_FieldDocumentation `protobuf:"bytes,8,rep,name=request_fields,json=requestFields,proto3" json:"request_fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Mappers        []*Config_MapperDocumentation         `protobuf:"bytes,6,rep,name=mappers,proto3" json:"mappers,omitempty"`
}

func (x *Config_Documentation) Reset() {
	*x = Config_Documentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Documentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Documentation) ProtoMessage() {}

func (x *Config_Documentation) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Documentation.ProtoReflect.Descriptor instead.
func (*Config_Documentation) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Config_Documentation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Config_Documentation) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

func (x *Config_Documentation) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *Config_Documentation) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *Config_Documentation) GetFields() map[string]*Config_FieldDocumentation {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Config_Documentation) GetTemplateFields() map[string]*Config_FieldDocumentation {
	if x != nil {
		return x.TemplateFields
	}
	return nil
}

func (x *Config_Documentation) GetRequestFields() map[string]*Config_FieldDocumentation {
	if x != nil {
		return x.RequestFields
	}
	return nil
}

func (x *Config_Documentation) GetMappers() []*Config_MapperDocumentation {
	if x != nil {
		return x.Mappers
	}
	return nil
}

// AuthResponse is returned by the Auth functions.
type Auth_AuthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authenticated bool `protobuf:"varint,1,opt,name=authenticated,proto3" json:"authenticated,omitempty"`
}

func (x *Auth_AuthResponse) Reset() {
	*x = Auth_AuthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auth_AuthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth_AuthResponse) ProtoMessage() {}

func (x *Auth_AuthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth_AuthResponse.ProtoReflect.Descriptor instead.
func (*Auth_AuthResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Auth_AuthResponse) GetAuthenticated() bool {
	if x != nil {
		return x.Authenticated
	}
	return false
}

// Resp is the response for the Generation function.
type Generation_Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Generation_Resp) Reset() {
	*x = Generation_Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Generation_Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Generation_Resp) ProtoMessage() {}

func (x *Generation_Resp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Generation_Resp.ProtoReflect.Descriptor instead.
func (*Generation_Resp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Generation_Resp) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

// ResourceManagerState is the state stored by the framework/resource.Manager
// structure. This should not be used directly by plugin authors.
type Framework_ResourceManagerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*Framework_ResourceState `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	// The order that resources were created. This is used internally
	// to construct the destruction order which is just this order reversed.
	CreateOrder []string `protobuf:"bytes,2,rep,name=create_order,json=createOrder,proto3" json:"create_order,omitempty"`
}

func (x *Framework_ResourceManagerState) Reset() {
	*x = Framework_ResourceManagerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Framework_ResourceManagerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framework_ResourceManagerState) ProtoMessage() {}

func (x *Framework_ResourceManagerState) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framework_ResourceManagerState.ProtoReflect.Descriptor instead.
func (*Framework_ResourceManagerState) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Framework_ResourceManagerState) GetResources() []*Framework_ResourceState {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Framework_ResourceManagerState) GetCreateOrder() []string {
	if x != nil {
		return x.CreateOrder
	}
	return nil
}

// ResourceState is the state of a single resource managed by the framework.
type Framework_ResourceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the name of this resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// raw is the raw state for this resource (if any, this can be nil).
	// The type can't typically be known since this is opaque and only
	// known by the plugin implementation.
	Raw *anypb.Any `protobuf:"bytes,2,opt,name=raw,proto3" json:"raw,omitempty"`
	// json is the jsonpb-encoded version of the raw state. This might be
	// used downstream even by consumers who don't know the original protobuf
	// type.
	Json string `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Framework_ResourceState) Reset() {
	*x = Framework_ResourceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Framework_ResourceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Framework_ResourceState) ProtoMessage() {}

func (x *Framework_ResourceState) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Framework_ResourceState.ProtoReflect.Descriptor instead.
func (*Framework_ResourceState) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Framework_ResourceState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Framework_ResourceState) GetRaw() *anypb.Any {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *Framework_ResourceState) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

// DeclaredResource references a declared resource.
type Ref_DeclaredResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique name of the declared resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Ref_DeclaredResource) Reset() {
	*x = Ref_DeclaredResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ref_DeclaredResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ref_DeclaredResource) ProtoMessage() {}

func (x *Ref_DeclaredResource) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ref_DeclaredResource.ProtoReflect.Descriptor instead.
func (*Ref_DeclaredResource) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Ref_DeclaredResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A resource as observed in a platform
type StatusReport_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the resource, according to the platform.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// The declared resource that this resource was created from. I.e. a plugin may have
	// an autoscaling group declared resource, and a status report may find an autoscaling group
	// resource and multiple instance resources that all reference the original ASG declared resource.
	// This field is set automatically by the resource manager framework.
	DeclaredResource *Ref_DeclaredResource `protobuf:"bytes,5,opt,name=declared_resource,json=declaredResource,proto3" json:"declared_resource,omitempty"`
	// Resources that created this resource.
	ParentResourceId string `protobuf:"bytes,6,opt,name=parent_resource_id,json=parentResourceId,proto3" json:"parent_resource_id,omitempty"`
	// Friendly name of the resource, if applicable
	// If using resource manager, this will default to the name of the resource manager resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The platform on which the resource exists.
	// If using resource manager, this will default to the platform of the resource manager resource
	Platform string `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
	// platform-specific name of the resource type. i.e. instance, pod, auto-scaling group, etc
	// If using resource manager, this will default to the type of the resource manager resource
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// A link directly to the resource in the platform, if applicable.
	PlatformUrl string `protobuf:"bytes,9,opt,name=platform_url,json=platformUrl,proto3" json:"platform_url,omitempty"`
	// The high level category of the resource, used as a hint to the UI on how to display the resource.
	CategoryDisplayHint ResourceCategoryDisplayHint `protobuf:"varint,10,opt,name=category_display_hint,json=categoryDisplayHint,proto3,enum=hashicorp.waypoint.sdk.ResourceCategoryDisplayHint" json:"category_display_hint,omitempty"`
	// platform-reported time of resource creation
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// any additional metadata about the resource, encoded as JSON
	StateJson string `protobuf:"bytes,12,opt,name=state_json,json=stateJson,proto3" json:"state_json,omitempty"`
	// the current health state for a single resource
	Health StatusReport_Health `protobuf:"varint,2,opt,name=health,proto3,enum=hashicorp.waypoint.sdk.StatusReport_Health" json:"health,omitempty"`
	// a simple human readable message detailing the Health state
	HealthMessage string `protobuf:"bytes,3,opt,name=health_message,json=healthMessage,proto3" json:"health_message,omitempty"`
}

func (x *StatusReport_Resource) Reset() {
	*x = StatusReport_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusReport_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusReport_Resource) ProtoMessage() {}

func (x *StatusReport_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusReport_Resource.ProtoReflect.Descriptor instead.
func (*StatusReport_Resource) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{8, 0}
}

func (x *StatusReport_Resource) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatusReport_Resource) GetDeclaredResource() *Ref_DeclaredResource {
	if x != nil {
		return x.DeclaredResource
	}
	return nil
}

func (x *StatusReport_Resource) GetParentResourceId() string {
	if x != nil {
		return x.ParentResourceId
	}
	return ""
}

func (x *StatusReport_Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatusReport_Resource) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *StatusReport_Resource) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StatusReport_Resource) GetPlatformUrl() string {
	if x != nil {
		return x.PlatformUrl
	}
	return ""
}

func (x *StatusReport_Resource) GetCategoryDisplayHint() ResourceCategoryDisplayHint {
	if x != nil {
		return x.CategoryDisplayHint
	}
	return ResourceCategoryDisplayHint_UNKNOWN
}

func (x *StatusReport_Resource) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *StatusReport_Resource) GetStateJson() string {
	if x != nil {
		return x.StateJson
	}
	return ""
}

func (x *StatusReport_Resource) GetHealth() StatusReport_Health {
	if x != nil {
		return x.Health
	}
	return StatusReport_UNKNOWN
}

func (x *StatusReport_Resource) GetHealthMessage() string {
	if x != nil {
		return x.HealthMessage
	}
	return ""
}

type ExecSession_OutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Stderr bool   `protobuf:"varint,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *ExecSession_OutputRequest) Reset() {
	*x = ExecSession_OutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecSession_OutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecSession_OutputRequest) ProtoMessage() {}

func (x *ExecSession_OutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecSession_OutputRequest.ProtoReflect.Descriptor instead.
func (*ExecSession_OutputRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ExecSession_OutputRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecSession_OutputRequest) GetStderr() bool {
	if x != nil {
		return x.Stderr
	}
	return false
}

type ExecSession_InputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Input:
	//	*ExecSession_InputRequest_Data
	//	*ExecSession_InputRequest_WindowSize
	//	*ExecSession_InputRequest_InputClosed
	Input isExecSession_InputRequest_Input `protobuf_oneof:"input"`
}

func (x *ExecSession_InputRequest) Reset() {
	*x = ExecSession_InputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecSession_InputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecSession_InputRequest) ProtoMessage() {}

func (x *ExecSession_InputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecSession_InputRequest.ProtoReflect.Descriptor instead.
func (*ExecSession_InputRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{10, 1}
}

func (m *ExecSession_InputRequest) GetInput() isExecSession_InputRequest_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *ExecSession_InputRequest) GetData() []byte {
	if x, ok := x.GetInput().(*ExecSession_InputRequest_Data); ok {
		return x.Data
	}
	return nil
}

func (x *ExecSession_InputRequest) GetWindowSize() *WindowSize {
	if x, ok := x.GetInput().(*ExecSession_InputRequest_WindowSize); ok {
		return x.WindowSize
	}
	return nil
}

func (x *ExecSession_InputRequest) GetInputClosed() bool {
	if x, ok := x.GetInput().(*ExecSession_InputRequest_InputClosed); ok {
		return x.InputClosed
	}
	return false
}

type isExecSession_InputRequest_Input interface {
	isExecSession_InputRequest_Input()
}

type ExecSession_InputRequest_Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type ExecSession_InputRequest_WindowSize struct {
	WindowSize *WindowSize `protobuf:"bytes,2,opt,name=window_size,json=windowSize,proto3,oneof"`
}

type ExecSession_InputRequest_InputClosed struct {
	InputClosed bool `protobuf:"varint,3,opt,name=input_closed,json=inputClosed,proto3,oneof"`
}

func (*ExecSession_InputRequest_Data) isExecSession_InputRequest_Input() {}

func (*ExecSession_InputRequest_WindowSize) isExecSession_InputRequest_Input() {}

func (*ExecSession_InputRequest_InputClosed) isExecSession_InputRequest_Input() {}

type Logs_Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stream_id is the stream ID to connect to to get access to the
	// LogViewer service.
	StreamId uint32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *Logs_Resp) Reset() {
	*x = Logs_Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logs_Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logs_Resp) ProtoMessage() {}

func (x *Logs_Resp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logs_Resp.ProtoReflect.Descriptor instead.
func (*Logs_Resp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Logs_Resp) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type Logs_NextBatchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Logs_Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *Logs_NextBatchResp) Reset() {
	*x = Logs_NextBatchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logs_NextBatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logs_NextBatchResp) ProtoMessage() {}

func (x *Logs_NextBatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logs_NextBatchResp.ProtoReflect.Descriptor instead.
func (*Logs_NextBatchResp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Logs_NextBatchResp) GetEvents() []*Logs_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type Logs_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partition string                 `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Contents  string                 `protobuf:"bytes,3,opt,name=contents,proto3" json:"contents,omitempty"`
}

func (x *Logs_Event) Reset() {
	*x = Logs_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logs_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logs_Event) ProtoMessage() {}

func (x *Logs_Event) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logs_Event.ProtoReflect.Descriptor instead.
func (*Logs_Event) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{12, 2}
}

func (x *Logs_Event) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *Logs_Event) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Logs_Event) GetContents() string {
	if x != nil {
		return x.Contents
	}
	return ""
}

type TerminalUI_IsInteractiveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interactive bool `protobuf:"varint,1,opt,name=interactive,proto3" json:"interactive,omitempty"`
}

func (x *TerminalUI_IsInteractiveResponse) Reset() {
	*x = TerminalUI_IsInteractiveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_IsInteractiveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_IsInteractiveResponse) ProtoMessage() {}

func (x *TerminalUI_IsInteractiveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_IsInteractiveResponse.ProtoReflect.Descriptor instead.
func (*TerminalUI_IsInteractiveResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 0}
}

func (x *TerminalUI_IsInteractiveResponse) GetInteractive() bool {
	if x != nil {
		return x.Interactive
	}
	return false
}

type TerminalUI_OutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lines []string `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
}

func (x *TerminalUI_OutputRequest) Reset() {
	*x = TerminalUI_OutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_OutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_OutputRequest) ProtoMessage() {}

func (x *TerminalUI_OutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_OutputRequest.ProtoReflect.Descriptor instead.
func (*TerminalUI_OutputRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 1}
}

func (x *TerminalUI_OutputRequest) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type TerminalUI_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*TerminalUI_Response_Input
	Event isTerminalUI_Response_Event `protobuf_oneof:"event"`
}

func (x *TerminalUI_Response) Reset() {
	*x = TerminalUI_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Response) ProtoMessage() {}

func (x *TerminalUI_Response) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Response.ProtoReflect.Descriptor instead.
func (*TerminalUI_Response) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 2}
}

func (m *TerminalUI_Response) GetEvent() isTerminalUI_Response_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *TerminalUI_Response) GetInput() *TerminalUI_Event_InputResp {
	if x, ok := x.GetEvent().(*TerminalUI_Response_Input); ok {
		return x.Input
	}
	return nil
}

type isTerminalUI_Response_Event interface {
	isTerminalUI_Response_Event()
}

type TerminalUI_Response_Input struct {
	Input *TerminalUI_Event_InputResp `protobuf:"bytes,1,opt,name=input,proto3,oneof"`
}

func (*TerminalUI_Response_Input) isTerminalUI_Response_Event() {}

type TerminalUI_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*TerminalUI_Event_Line_
	//	*TerminalUI_Event_Status_
	//	*TerminalUI_Event_NamedValues_
	//	*TerminalUI_Event_Raw_
	//	*TerminalUI_Event_Table_
	//	*TerminalUI_Event_StepGroup_
	//	*TerminalUI_Event_Step_
	//	*TerminalUI_Event_Input_
	Event isTerminalUI_Event_Event `protobuf_oneof:"event"`
}

func (x *TerminalUI_Event) Reset() {
	*x = TerminalUI_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event) ProtoMessage() {}

func (x *TerminalUI_Event) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3}
}

func (m *TerminalUI_Event) GetEvent() isTerminalUI_Event_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *TerminalUI_Event) GetLine() *TerminalUI_Event_Line {
	if x, ok := x.GetEvent().(*TerminalUI_Event_Line_); ok {
		return x.Line
	}
	return nil
}

func (x *TerminalUI_Event) GetStatus() *TerminalUI_Event_Status {
	if x, ok := x.GetEvent().(*TerminalUI_Event_Status_); ok {
		return x.Status
	}
	return nil
}

func (x *TerminalUI_Event) GetNamedValues() *TerminalUI_Event_NamedValues {
	if x, ok := x.GetEvent().(*TerminalUI_Event_NamedValues_); ok {
		return x.NamedValues
	}
	return nil
}

func (x *TerminalUI_Event) GetRaw() *TerminalUI_Event_Raw {
	if x, ok := x.GetEvent().(*TerminalUI_Event_Raw_); ok {
		return x.Raw
	}
	return nil
}

func (x *TerminalUI_Event) GetTable() *TerminalUI_Event_Table {
	if x, ok := x.GetEvent().(*TerminalUI_Event_Table_); ok {
		return x.Table
	}
	return nil
}

func (x *TerminalUI_Event) GetStepGroup() *TerminalUI_Event_StepGroup {
	if x, ok := x.GetEvent().(*TerminalUI_Event_StepGroup_); ok {
		return x.StepGroup
	}
	return nil
}

func (x *TerminalUI_Event) GetStep() *TerminalUI_Event_Step {
	if x, ok := x.GetEvent().(*TerminalUI_Event_Step_); ok {
		return x.Step
	}
	return nil
}

func (x *TerminalUI_Event) GetInput() *TerminalUI_Event_Input {
	if x, ok := x.GetEvent().(*TerminalUI_Event_Input_); ok {
		return x.Input
	}
	return nil
}

type isTerminalUI_Event_Event interface {
	isTerminalUI_Event_Event()
}

type TerminalUI_Event_Line_ struct {
	Line *TerminalUI_Event_Line `protobuf:"bytes,1,opt,name=line,proto3,oneof"`
}

type TerminalUI_Event_Status_ struct {
	Status *TerminalUI_Event_Status `protobuf:"bytes,2,opt,name=status,proto3,oneof"`
}

type TerminalUI_Event_NamedValues_ struct {
	NamedValues *TerminalUI_Event_NamedValues `protobuf:"bytes,3,opt,name=named_values,json=namedValues,proto3,oneof"`
}

type TerminalUI_Event_Raw_ struct {
	Raw *TerminalUI_Event_Raw `protobuf:"bytes,4,opt,name=raw,proto3,oneof"`
}

type TerminalUI_Event_Table_ struct {
	Table *TerminalUI_Event_Table `protobuf:"bytes,5,opt,name=table,proto3,oneof"`
}

type TerminalUI_Event_StepGroup_ struct {
	StepGroup *TerminalUI_Event_StepGroup `protobuf:"bytes,6,opt,name=step_group,json=stepGroup,proto3,oneof"`
}

type TerminalUI_Event_Step_ struct {
	Step *TerminalUI_Event_Step `protobuf:"bytes,7,opt,name=step,proto3,oneof"`
}

type TerminalUI_Event_Input_ struct {
	Input *TerminalUI_Event_Input `protobuf:"bytes,8,opt,name=input,proto3,oneof"`
}

func (*TerminalUI_Event_Line_) isTerminalUI_Event_Event() {}

func (*TerminalUI_Event_Status_) isTerminalUI_Event_Event() {}

func (*TerminalUI_Event_NamedValues_) isTerminalUI_Event_Event() {}

func (*TerminalUI_Event_Raw_) isTerminalUI_Event_Event() {}

func (*TerminalUI_Event_Table_) isTerminalUI_Event_Event() {}

func (*TerminalUI_Event_StepGroup_) isTerminalUI_Event_Event() {}

func (*TerminalUI_Event_Step_) isTerminalUI_Event_Event() {}

func (*TerminalUI_Event_Input_) isTerminalUI_Event_Event() {}

type TerminalUI_Event_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prompt string `protobuf:"bytes,1,opt,name=prompt,proto3" json:"prompt,omitempty"`
	Style  string `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	Secret bool   `protobuf:"varint,3,opt,name=secret,proto3" json:"secret,omitempty"`
}

func (x *TerminalUI_Event_Input) Reset() {
	*x = TerminalUI_Event_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_Input) ProtoMessage() {}

func (x *TerminalUI_Event_Input) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_Input.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_Input) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 0}
}

func (x *TerminalUI_Event_Input) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *TerminalUI_Event_Input) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *TerminalUI_Event_Input) GetSecret() bool {
	if x != nil {
		return x.Secret
	}
	return false
}

type TerminalUI_Event_InputResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input string         `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TerminalUI_Event_InputResp) Reset() {
	*x = TerminalUI_Event_InputResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_InputResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_InputResp) ProtoMessage() {}

func (x *TerminalUI_Event_InputResp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_InputResp.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_InputResp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 1}
}

func (x *TerminalUI_Event_InputResp) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TerminalUI_Event_InputResp) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

type TerminalUI_Event_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Step   bool   `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (x *TerminalUI_Event_Status) Reset() {
	*x = TerminalUI_Event_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_Status) ProtoMessage() {}

func (x *TerminalUI_Event_Status) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_Status.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_Status) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 2}
}

func (x *TerminalUI_Event_Status) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TerminalUI_Event_Status) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TerminalUI_Event_Status) GetStep() bool {
	if x != nil {
		return x.Step
	}
	return false
}

type TerminalUI_Event_Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg   string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Style string `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
}

func (x *TerminalUI_Event_Line) Reset() {
	*x = TerminalUI_Event_Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_Line) ProtoMessage() {}

func (x *TerminalUI_Event_Line) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_Line.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_Line) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 3}
}

func (x *TerminalUI_Event_Line) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TerminalUI_Event_Line) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

type TerminalUI_Event_Raw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Stderr bool   `protobuf:"varint,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *TerminalUI_Event_Raw) Reset() {
	*x = TerminalUI_Event_Raw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_Raw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_Raw) ProtoMessage() {}

func (x *TerminalUI_Event_Raw) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_Raw.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_Raw) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 4}
}

func (x *TerminalUI_Event_Raw) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TerminalUI_Event_Raw) GetStderr() bool {
	if x != nil {
		return x.Stderr
	}
	return false
}

type TerminalUI_Event_NamedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TerminalUI_Event_NamedValue) Reset() {
	*x = TerminalUI_Event_NamedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_NamedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_NamedValue) ProtoMessage() {}

func (x *TerminalUI_Event_NamedValue) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_NamedValue.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_NamedValue) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 5}
}

func (x *TerminalUI_Event_NamedValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TerminalUI_Event_NamedValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type TerminalUI_Event_NamedValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*TerminalUI_Event_NamedValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TerminalUI_Event_NamedValues) Reset() {
	*x = TerminalUI_Event_NamedValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_NamedValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_NamedValues) ProtoMessage() {}

func (x *TerminalUI_Event_NamedValues) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_NamedValues.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_NamedValues) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 6}
}

func (x *TerminalUI_Event_NamedValues) GetValues() []*TerminalUI_Event_NamedValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type TerminalUI_Event_TableEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Color string `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
}

func (x *TerminalUI_Event_TableEntry) Reset() {
	*x = TerminalUI_Event_TableEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_TableEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_TableEntry) ProtoMessage() {}

func (x *TerminalUI_Event_TableEntry) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_TableEntry.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_TableEntry) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 7}
}

func (x *TerminalUI_Event_TableEntry) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TerminalUI_Event_TableEntry) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

type TerminalUI_Event_TableRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*TerminalUI_Event_TableEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *TerminalUI_Event_TableRow) Reset() {
	*x = TerminalUI_Event_TableRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_TableRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_TableRow) ProtoMessage() {}

func (x *TerminalUI_Event_TableRow) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_TableRow.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_TableRow) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 8}
}

func (x *TerminalUI_Event_TableRow) GetEntries() []*TerminalUI_Event_TableEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TerminalUI_Event_Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Headers []string                     `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
	Rows    []*TerminalUI_Event_TableRow `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *TerminalUI_Event_Table) Reset() {
	*x = TerminalUI_Event_Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_Table) ProtoMessage() {}

func (x *TerminalUI_Event_Table) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_Table.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_Table) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 9}
}

func (x *TerminalUI_Event_Table) GetHeaders() []string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *TerminalUI_Event_Table) GetRows() []*TerminalUI_Event_TableRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

type TerminalUI_Event_StepGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Close bool  `protobuf:"varint,1,opt,name=close,proto3" json:"close,omitempty"`
	Id    int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TerminalUI_Event_StepGroup) Reset() {
	*x = TerminalUI_Event_StepGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_StepGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_StepGroup) ProtoMessage() {}

func (x *TerminalUI_Event_StepGroup) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_StepGroup.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_StepGroup) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 10}
}

func (x *TerminalUI_Event_StepGroup) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

func (x *TerminalUI_Event_StepGroup) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TerminalUI_Event_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Close     bool   `protobuf:"varint,2,opt,name=close,proto3" json:"close,omitempty"`
	Msg       string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Status    string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Output    []byte `protobuf:"bytes,5,opt,name=output,proto3" json:"output,omitempty"`
	StepGroup int32  `protobuf:"varint,6,opt,name=step_group,json=stepGroup,proto3" json:"step_group,omitempty"`
}

func (x *TerminalUI_Event_Step) Reset() {
	*x = TerminalUI_Event_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminalUI_Event_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminalUI_Event_Step) ProtoMessage() {}

func (x *TerminalUI_Event_Step) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminalUI_Event_Step.ProtoReflect.Descriptor instead.
func (*TerminalUI_Event_Step) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{13, 3, 11}
}

func (x *TerminalUI_Event_Step) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TerminalUI_Event_Step) GetClose() bool {
	if x != nil {
		return x.Close
	}
	return false
}

func (x *TerminalUI_Event_Step) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TerminalUI_Event_Step) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TerminalUI_Event_Step) GetOutput() []byte {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *TerminalUI_Event_Step) GetStepGroup() int32 {
	if x != nil {
		return x.StepGroup
	}
	return 0
}

type Map_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// args is the list of argument types.
	Args *FuncSpec_Args `protobuf:"bytes,1,opt,name=args,proto3" json:"args,omitempty"`
	// result is the desired result type.
	Result string `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Map_Request) Reset() {
	*x = Map_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map_Request) ProtoMessage() {}

func (x *Map_Request) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map_Request.ProtoReflect.Descriptor instead.
func (*Map_Request) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Map_Request) GetArgs() *FuncSpec_Args {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Map_Request) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type Map_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result is the mapped data type that matches the type expected
	// by the MapRequest.result field.
	Result *anypb.Any `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Map_Response) Reset() {
	*x = Map_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map_Response) ProtoMessage() {}

func (x *Map_Response) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map_Response.ProtoReflect.Descriptor instead.
func (*Map_Response) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{14, 1}
}

func (x *Map_Response) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

type Map_ListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FuncSpec
	Funcs []*FuncSpec `protobuf:"bytes,1,rep,name=funcs,proto3" json:"funcs,omitempty"`
}

func (x *Map_ListResponse) Reset() {
	*x = Map_ListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map_ListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map_ListResponse) ProtoMessage() {}

func (x *Map_ListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map_ListResponse.ProtoReflect.Descriptor instead.
func (*Map_ListResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{14, 2}
}

func (x *Map_ListResponse) GetFuncs() []*FuncSpec {
	if x != nil {
		return x.Funcs
	}
	return nil
}

type Build_Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       *anypb.Any        `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ResultJson   string            `protobuf:"bytes,4,opt,name=result_json,json=resultJson,proto3" json:"result_json,omitempty"`
	Labels       map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TemplateData []byte            `protobuf:"bytes,3,opt,name=template_data,json=templateData,proto3" json:"template_data,omitempty"`
}

func (x *Build_Resp) Reset() {
	*x = Build_Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build_Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build_Resp) ProtoMessage() {}

func (x *Build_Resp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build_Resp.ProtoReflect.Descriptor instead.
func (*Build_Resp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Build_Resp) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Build_Resp) GetResultJson() string {
	if x != nil {
		return x.ResultJson
	}
	return ""
}

func (x *Build_Resp) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Build_Resp) GetTemplateData() []byte {
	if x != nil {
		return x.TemplateData
	}
	return nil
}

type DefaultReleaser_Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stream_id is the stream ID to connect to to get access to the
	// ReleaseManager implementation.
	StreamId uint32 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *DefaultReleaser_Resp) Reset() {
	*x = DefaultReleaser_Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultReleaser_Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultReleaser_Resp) ProtoMessage() {}

func (x *DefaultReleaser_Resp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultReleaser_Resp.ProtoReflect.Descriptor instead.
func (*DefaultReleaser_Resp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{16, 0}
}

func (x *DefaultReleaser_Resp) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type Deploy_Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result is the resulting opaque data type
	Result     *anypb.Any `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ResultJson string     `protobuf:"bytes,5,opt,name=result_json,json=resultJson,proto3" json:"result_json,omitempty"`
	// deployment structure
	Deployment *Deploy `protobuf:"bytes,3,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// template data for the deployment
	TemplateData []byte `protobuf:"bytes,2,opt,name=template_data,json=templateData,proto3" json:"template_data,omitempty"`
	// an array of declared resources that make up the deployment
	DeclaredResources *DeclaredResources `protobuf:"bytes,4,opt,name=declared_resources,json=declaredResources,proto3" json:"declared_resources,omitempty"`
}

func (x *Deploy_Resp) Reset() {
	*x = Deploy_Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deploy_Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deploy_Resp) ProtoMessage() {}

func (x *Deploy_Resp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deploy_Resp.ProtoReflect.Descriptor instead.
func (*Deploy_Resp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Deploy_Resp) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Deploy_Resp) GetResultJson() string {
	if x != nil {
		return x.ResultJson
	}
	return ""
}

func (x *Deploy_Resp) GetDeployment() *Deploy {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Deploy_Resp) GetTemplateData() []byte {
	if x != nil {
		return x.TemplateData
	}
	return nil
}

func (x *Deploy_Resp) GetDeclaredResources() *DeclaredResources {
	if x != nil {
		return x.DeclaredResources
	}
	return nil
}

type Push_Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result is the resulting opaque data type
	Result     *anypb.Any `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ResultJson string     `protobuf:"bytes,3,opt,name=result_json,json=resultJson,proto3" json:"result_json,omitempty"`
	// template data for the artifact
	TemplateData []byte `protobuf:"bytes,2,opt,name=template_data,json=templateData,proto3" json:"template_data,omitempty"`
}

func (x *Push_Resp) Reset() {
	*x = Push_Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Push_Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Push_Resp) ProtoMessage() {}

func (x *Push_Resp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Push_Resp.ProtoReflect.Descriptor instead.
func (*Push_Resp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{20, 0}
}

func (x *Push_Resp) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Push_Resp) GetResultJson() string {
	if x != nil {
		return x.ResultJson
	}
	return ""
}

func (x *Push_Resp) GetTemplateData() []byte {
	if x != nil {
		return x.TemplateData
	}
	return nil
}

type Access_Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result is the resulting opaque data type
	Result *anypb.Any `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Access_Resp) Reset() {
	*x = Access_Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Access_Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Access_Resp) ProtoMessage() {}

func (x *Access_Resp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Access_Resp.ProtoReflect.Descriptor instead.
func (*Access_Resp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{21, 0}
}

func (x *Access_Resp) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

type Release_Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result is the resulting data type for building.
	Result *anypb.Any `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// release structure
	Release *Release `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	// template data for the release
	TemplateData []byte `protobuf:"bytes,3,opt,name=template_data,json=templateData,proto3" json:"template_data,omitempty"`
	// an array of declared resources that make up the release
	DeclaredResources *DeclaredResources `protobuf:"bytes,4,opt,name=declared_resources,json=declaredResources,proto3" json:"declared_resources,omitempty"`
}

func (x *Release_Resp) Reset() {
	*x = Release_Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Release_Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Release_Resp) ProtoMessage() {}

func (x *Release_Resp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Release_Resp.ProtoReflect.Descriptor instead.
func (*Release_Resp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{22, 0}
}

func (x *Release_Resp) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Release_Resp) GetRelease() *Release {
	if x != nil {
		return x.Release
	}
	return nil
}

func (x *Release_Resp) GetTemplateData() []byte {
	if x != nil {
		return x.TemplateData
	}
	return nil
}

func (x *Release_Resp) GetDeclaredResources() *DeclaredResources {
	if x != nil {
		return x.DeclaredResources
	}
	return nil
}

type ConfigSource_ReadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// values should be exactly equivalent in length to the list of
	// variable requests given to the Read function.
	Values []*ConfigSource_Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ConfigSource_ReadResponse) Reset() {
	*x = ConfigSource_ReadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSource_ReadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSource_ReadResponse) ProtoMessage() {}

func (x *ConfigSource_ReadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSource_ReadResponse.ProtoReflect.Descriptor instead.
func (*ConfigSource_ReadResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{23, 0}
}

func (x *ConfigSource_ReadResponse) GetValues() []*ConfigSource_Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type ConfigSource_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name must match the input name or the entrypoint will ignore it.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Result:
	//	*ConfigSource_Value_Error
	//	*ConfigSource_Value_Value
	Result isConfigSource_Value_Result `protobuf_oneof:"result"`
}

func (x *ConfigSource_Value) Reset() {
	*x = ConfigSource_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSource_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSource_Value) ProtoMessage() {}

func (x *ConfigSource_Value) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSource_Value.ProtoReflect.Descriptor instead.
func (*ConfigSource_Value) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{23, 1}
}

func (x *ConfigSource_Value) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *ConfigSource_Value) GetResult() isConfigSource_Value_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ConfigSource_Value) GetError() *status.Status {
	if x, ok := x.GetResult().(*ConfigSource_Value_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ConfigSource_Value) GetValue() string {
	if x, ok := x.GetResult().(*ConfigSource_Value_Value); ok {
		return x.Value
	}
	return ""
}

type isConfigSource_Value_Result interface {
	isConfigSource_Value_Result()
}

type ConfigSource_Value_Error struct {
	// error is an error retrieving this value. Sourcers may also return
	// an error from the entire Read function. The benefit of granular
	// errors is that the runtime may be able to fallback to a default.
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type ConfigSource_Value_Value struct {
	// value must be a string value for the config since we currently
	// only support environment variables.
	Value string `protobuf:"bytes,3,opt,name=value,proto3,oneof"`
}

func (*ConfigSource_Value_Error) isConfigSource_Value_Result() {}

func (*ConfigSource_Value_Value) isConfigSource_Value_Result() {}

type TaskLaunch_Resp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *anypb.Any `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	ResultJson string     `protobuf:"bytes,2,opt,name=result_json,json=resultJson,proto3" json:"result_json,omitempty"`
}

func (x *TaskLaunch_Resp) Reset() {
	*x = TaskLaunch_Resp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskLaunch_Resp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskLaunch_Resp) ProtoMessage() {}

func (x *TaskLaunch_Resp) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskLaunch_Resp.ProtoReflect.Descriptor instead.
func (*TaskLaunch_Resp) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{24, 0}
}

func (x *TaskLaunch_Resp) GetResult() *anypb.Any {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TaskLaunch_Resp) GetResultJson() string {
	if x != nil {
		return x.ResultJson
	}
	return ""
}

var File_plugin_proto protoreflect.FileDescriptor

var file_plugin_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b,
	0x0d, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x2e, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0x79, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x70, 0x70, 0x1a, 0xeb, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6c, 0x73, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x36, 0x0a, 0x17,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x1a, 0xd0, 0x01, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x1a, 0x41, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x1a,
	0x3d, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x1a, 0x43,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x44, 0x69, 0x72, 0x1a, 0x1c, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x29, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a, 0xb8, 0x01, 0x0a,
	0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12,
	0x4c, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x58, 0x0a,
	0x06, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x1a, 0x90, 0x01, 0x0a, 0x08, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x72,
	0x67, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xd3, 0x01, 0x0a, 0x0f, 0x45,
	0x78, 0x65, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x54, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x76,
	0x1a, 0x7b, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0xac, 0x02,
	0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x63, 0x69, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x63, 0x69, 0x55, 0x72, 0x6c, 0x12, 0x7a, 0x0a, 0x15, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x47, 0x0a, 0x19, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x05, 0x0a,
	0x08, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0xc6, 0x03, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x70,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x50, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x6e, 0x79, 0x12, 0x14, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x54,
	0x38, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54,
	0x36, 0x34, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x49, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x09,
	0x0a, 0x05, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e,
	0x54, 0x31, 0x36, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10,
	0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x0b, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x18, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x42, 0x0a, 0x04, 0x41, 0x72, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xcf, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x1a, 0x26, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0xaf, 0x02, 0x0a, 0x12, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x65, 0x0a, 0x13, 0x4d, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xc5, 0x06, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x50, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x69,
	0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x66, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x4c, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x1a,
	0x6c, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x74, 0x0a,
	0x13, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68,
	0x1a, 0x34, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x24, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x0e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xf7,
	0x01, 0x0a, 0x09, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x88, 0x01, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x5f, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x03,
	0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x03, 0x72, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x03, 0x52, 0x65, 0x66, 0x1a,
	0x26, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb7, 0x07, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x41, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x1a, 0xbd, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x59, 0x0a,
	0x11, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x52, 0x65, 0x66, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x67, 0x0a,
	0x15, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e,
	0x74, 0x52, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x4f, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x4c, 0x49, 0x56, 0x45,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x04, 0x22, 0x3a, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x22, 0xe6, 0x01,
	0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x1a, 0x99, 0x01, 0x0a, 0x0c, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x45, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x07, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x29, 0x0a, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xf5, 0x01, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x73, 0x1a, 0x23, 0x0a, 0x04, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x1a,
	0x4b, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3a, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x7b, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd6, 0x0d, 0x0a, 0x0a, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x1a, 0x39, 0x0a, 0x15, 0x49, 0x73, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x1a, 0x25, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x5f, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x84, 0x0c, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55,
	0x49, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x61, 0x77, 0x48, 0x00, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x12, 0x46, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x55, 0x49, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x73, 0x74,
	0x65, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x55, 0x49, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x65, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x43, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55,
	0x49, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x4d, 0x0a, 0x05,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x4b, 0x0a, 0x09, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x1a, 0x2e, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x1a, 0x31, 0x0a, 0x03, 0x52, 0x61, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x64,
	0x65, 0x72, 0x72, 0x1a, 0x36, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x5a, 0x0a, 0x0b, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x1a, 0x59, 0x0a, 0x08, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x12, 0x4d, 0x0a,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x55, 0x49, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x68, 0x0a, 0x05,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x45, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55,
	0x49, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x1a, 0x31, 0x0a, 0x09, 0x53, 0x74, 0x65, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x8d, 0x01, 0x0a, 0x04, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x65, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x74, 0x65, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x1a, 0x5c, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x1a, 0x46, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x63, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x05, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x1a, 0xfd, 0x01, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x1a, 0x23, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xb1, 0x02, 0x0a,
	0x06, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x94, 0x02, 0x0a, 0x04, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4a, 0x73, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x11, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x22, 0x8a, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6a,
	0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x15, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x13, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x5b, 0x0a,
	0x11, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x04, 0x50,
	0x75, 0x73, 0x68, 0x1a, 0x7a, 0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22,
	0x3e, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x34, 0x0a, 0x04, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x8c, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0xee, 0x01,
	0x0a, 0x04, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x11, 0x64, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xcd,
	0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a,
	0x52, 0x0a, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x69, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x63,
	0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x1a, 0x55, 0x0a, 0x04,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4a,
	0x73, 0x6f, 0x6e, 0x2a, 0x98, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x48,
	0x69, 0x6e, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x07, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x08, 0x32, 0xbe,
	0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x31, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x53, 0x0a, 0x05, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x30, 0x01, 0x32,
	0x61, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x0c,
	0x4e, 0x65, 0x78, 0x74, 0x4c, 0x6f, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2a, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x01, 0x32, 0xaf, 0x02, 0x0a, 0x11, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55,
	0x49, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x06,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x1a, 0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x55, 0x49, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x61, 0x0a, 0x0d, 0x49, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x38, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x49, 0x2e, 0x49,
	0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0xab, 0x01, 0x0a, 0x06, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x4f, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x4d, 0x61, 0x70, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x50, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x4d, 0x61, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4d, 0x61, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xd5, 0x07, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x0f, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x58, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x4d, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4c, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x51,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x54, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x2f,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x52, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x25,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x22, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x08, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4f, 0x44, 0x52, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x22, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x48, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x44, 0x52,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x32, 0xf8, 0x12, 0x0a, 0x08, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x51, 0x0a, 0x0f, 0x49, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x04, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4d, 0x0a, 0x0c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x09, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x55, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x54, 0x0a, 0x06, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4f, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x66, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d,
	0x0a, 0x0b, 0x49, 0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x72, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x56, 0x0a, 0x14, 0x49, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x51, 0x0a, 0x10, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a,
	0x08, 0x49, 0x73, 0x45, 0x78, 0x65, 0x63, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x45, 0x78, 0x65,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x51, 0x0a, 0x04, 0x45, 0x78, 0x65, 0x63, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x22,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x04, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x4e, 0x0a, 0x0c, 0x49, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5c, 0x0a, 0x0a,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x08, 0x49, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x55,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0xd0, 0x07, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x51, 0x0a, 0x0f, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x25, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x41, 0x72, 0x67, 0x73, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4d, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x12, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0d, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x04, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0a, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x54, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41,
	0x72, 0x67, 0x73, 0x1a, 0x23, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x32, 0x8b, 0x0c, 0x0a, 0x0e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0f, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x58,
	0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x29, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4d,
	0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x12, 0x25,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a,
	0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x51, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0b, 0x49,
	0x73, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x48, 0x0a, 0x07, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x25,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a,
	0x14, 0x49, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x65, 0x73, 0x74,
	0x72, 0x6f, 0x79, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x51, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x74, 0x72,
	0x6f, 0x79, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72,
	0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x56, 0x0a, 0x07, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x25,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x08, 0x49,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x55, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73,
	0x1a, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0xc4, 0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x09, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x2f, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x55, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2c, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x52, 0x65, 0x61, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x60,
	0x0a, 0x04, 0x52, 0x65, 0x61, 0x64, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x31, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x45, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x25,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xc3, 0x04,
	0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x54, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x2f,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e,
	0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x44, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73,
	0x64, 0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x5b, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a,
	0x27, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x08, 0x53, 0x74, 0x6f, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x25, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x75,
	0x6e, 0x63, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_proto_rawDescOnce sync.Once
	file_plugin_proto_rawDescData = file_plugin_proto_rawDesc
)

func file_plugin_proto_rawDescGZIP() []byte {
	file_plugin_proto_rawDescOnce.Do(func() {
		file_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_proto_rawDescData)
	})
	return file_plugin_proto_rawDescData
}

var file_plugin_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 92)
var file_plugin_proto_goTypes = []interface{}{
	(ResourceCategoryDisplayHint)(0),         // 0: hashicorp.waypoint.sdk.ResourceCategoryDisplayHint
	(FuncSpec_Value_PrimitiveType)(0),        // 1: hashicorp.waypoint.sdk.FuncSpec.Value.PrimitiveType
	(StatusReport_Health)(0),                 // 2: hashicorp.waypoint.sdk.StatusReport.Health
	(*Args)(nil),                             // 3: hashicorp.waypoint.sdk.Args
	(*FuncSpec)(nil),                         // 4: hashicorp.waypoint.sdk.FuncSpec
	(*Config)(nil),                           // 5: hashicorp.waypoint.sdk.Config
	(*Auth)(nil),                             // 6: hashicorp.waypoint.sdk.Auth
	(*Generation)(nil),                       // 7: hashicorp.waypoint.sdk.Generation
	(*ImplementsResp)(nil),                   // 8: hashicorp.waypoint.sdk.ImplementsResp
	(*Framework)(nil),                        // 9: hashicorp.waypoint.sdk.Framework
	(*Ref)(nil),                              // 10: hashicorp.waypoint.sdk.Ref
	(*StatusReport)(nil),                     // 11: hashicorp.waypoint.sdk.StatusReport
	(*WindowSize)(nil),                       // 12: hashicorp.waypoint.sdk.WindowSize
	(*ExecSession)(nil),                      // 13: hashicorp.waypoint.sdk.ExecSession
	(*ExecResult)(nil),                       // 14: hashicorp.waypoint.sdk.ExecResult
	(*Logs)(nil),                             // 15: hashicorp.waypoint.sdk.Logs
	(*TerminalUI)(nil),                       // 16: hashicorp.waypoint.sdk.TerminalUI
	(*Map)(nil),                              // 17: hashicorp.waypoint.sdk.Map
	(*Build)(nil),                            // 18: hashicorp.waypoint.sdk.Build
	(*DefaultReleaser)(nil),                  // 19: hashicorp.waypoint.sdk.DefaultReleaser
	(*Deploy)(nil),                           // 20: hashicorp.waypoint.sdk.Deploy
	(*DeclaredResource)(nil),                 // 21: hashicorp.waypoint.sdk.DeclaredResource
	(*DeclaredResources)(nil),                // 22: hashicorp.waypoint.sdk.DeclaredResources
	(*Push)(nil),                             // 23: hashicorp.waypoint.sdk.Push
	(*Access)(nil),                           // 24: hashicorp.waypoint.sdk.Access
	(*Release)(nil),                          // 25: hashicorp.waypoint.sdk.Release
	(*ConfigSource)(nil),                     // 26: hashicorp.waypoint.sdk.ConfigSource
	(*TaskLaunch)(nil),                       // 27: hashicorp.waypoint.sdk.TaskLaunch
	(*Args_Source)(nil),                      // 28: hashicorp.waypoint.sdk.Args.Source
	(*Args_JobInfo)(nil),                     // 29: hashicorp.waypoint.sdk.Args.JobInfo
	(*Args_DeploymentConfig)(nil),            // 30: hashicorp.waypoint.sdk.Args.DeploymentConfig
	(*Args_DataDir)(nil),                     // 31: hashicorp.waypoint.sdk.Args.DataDir
	(*Args_Logger)(nil),                      // 32: hashicorp.waypoint.sdk.Args.Logger
	(*Args_TerminalUI)(nil),                  // 33: hashicorp.waypoint.sdk.Args.TerminalUI
	(*Args_ReleaseTargets)(nil),              // 34: hashicorp.waypoint.sdk.Args.ReleaseTargets
	(*Args_LabelSet)(nil),                    // 35: hashicorp.waypoint.sdk.Args.LabelSet
	(*Args_ExecSessionInfo)(nil),             // 36: hashicorp.waypoint.sdk.Args.ExecSessionInfo
	(*Args_LogViewer)(nil),                   // 37: hashicorp.waypoint.sdk.Args.LogViewer
	(*Args_TaskLaunchInfo)(nil),              // 38: hashicorp.waypoint.sdk.Args.TaskLaunchInfo
	(*Args_DataDir_Project)(nil),             // 39: hashicorp.waypoint.sdk.Args.DataDir.Project
	(*Args_DataDir_App)(nil),                 // 40: hashicorp.waypoint.sdk.Args.DataDir.App
	(*Args_DataDir_Component)(nil),           // 41: hashicorp.waypoint.sdk.Args.DataDir.Component
	(*Args_ReleaseTargets_Target)(nil),       // 42: hashicorp.waypoint.sdk.Args.ReleaseTargets.Target
	nil,                                      // 43: hashicorp.waypoint.sdk.Args.LabelSet.LabelsEntry
	nil,                                      // 44: hashicorp.waypoint.sdk.Args.TaskLaunchInfo.EnvironmentVariablesEntry
	(*FuncSpec_Value)(nil),                   // 45: hashicorp.waypoint.sdk.FuncSpec.Value
	(*FuncSpec_Args)(nil),                    // 46: hashicorp.waypoint.sdk.FuncSpec.Args
	(*Config_ConfigureRequest)(nil),          // 47: hashicorp.waypoint.sdk.Config.ConfigureRequest
	(*Config_StructResp)(nil),                // 48: hashicorp.waypoint.sdk.Config.StructResp
	(*Config_FieldDocumentation)(nil),        // 49: hashicorp.waypoint.sdk.Config.FieldDocumentation
	(*Config_MapperDocumentation)(nil),       // 50: hashicorp.waypoint.sdk.Config.MapperDocumentation
	(*Config_Documentation)(nil),             // 51: hashicorp.waypoint.sdk.Config.Documentation
	nil,                                      // 52: hashicorp.waypoint.sdk.Config.Documentation.FieldsEntry
	nil,                                      // 53: hashicorp.waypoint.sdk.Config.Documentation.TemplateFieldsEntry
	nil,                                      // 54: hashicorp.waypoint.sdk.Config.Documentation.RequestFieldsEntry
	(*Auth_AuthResponse)(nil),                // 55: hashicorp.waypoint.sdk.Auth.AuthResponse
	(*Generation_Resp)(nil),                  // 56: hashicorp.waypoint.sdk.Generation.Resp
	(*Framework_ResourceManagerState)(nil),   // 57: hashicorp.waypoint.sdk.Framework.ResourceManagerState
	(*Framework_ResourceState)(nil),          // 58: hashicorp.waypoint.sdk.Framework.ResourceState
	(*Ref_DeclaredResource)(nil),             // 59: hashicorp.waypoint.sdk.Ref.DeclaredResource
	(*StatusReport_Resource)(nil),            // 60: hashicorp.waypoint.sdk.StatusReport.Resource
	(*ExecSession_OutputRequest)(nil),        // 61: hashicorp.waypoint.sdk.ExecSession.OutputRequest
	(*ExecSession_InputRequest)(nil),         // 62: hashicorp.waypoint.sdk.ExecSession.InputRequest
	(*Logs_Resp)(nil),                        // 63: hashicorp.waypoint.sdk.Logs.Resp
	(*Logs_NextBatchResp)(nil),               // 64: hashicorp.waypoint.sdk.Logs.NextBatchResp
	(*Logs_Event)(nil),                       // 65: hashicorp.waypoint.sdk.Logs.Event
	(*TerminalUI_IsInteractiveResponse)(nil), // 66: hashicorp.waypoint.sdk.TerminalUI.IsInteractiveResponse
	(*TerminalUI_OutputRequest)(nil),         // 67: hashicorp.waypoint.sdk.TerminalUI.OutputRequest
	(*TerminalUI_Response)(nil),              // 68: hashicorp.waypoint.sdk.TerminalUI.Response
	(*TerminalUI_Event)(nil),                 // 69: hashicorp.waypoint.sdk.TerminalUI.Event
	(*TerminalUI_Event_Input)(nil),           // 70: hashicorp.waypoint.sdk.TerminalUI.Event.Input
	(*TerminalUI_Event_InputResp)(nil),       // 71: hashicorp.waypoint.sdk.TerminalUI.Event.InputResp
	(*TerminalUI_Event_Status)(nil),          // 72: hashicorp.waypoint.sdk.TerminalUI.Event.Status
	(*TerminalUI_Event_Line)(nil),            // 73: hashicorp.waypoint.sdk.TerminalUI.Event.Line
	(*TerminalUI_Event_Raw)(nil),             // 74: hashicorp.waypoint.sdk.TerminalUI.Event.Raw
	(*TerminalUI_Event_NamedValue)(nil),      // 75: hashicorp.waypoint.sdk.TerminalUI.Event.NamedValue
	(*TerminalUI_Event_NamedValues)(nil),     // 76: hashicorp.waypoint.sdk.TerminalUI.Event.NamedValues
	(*TerminalUI_Event_TableEntry)(nil),      // 77: hashicorp.waypoint.sdk.TerminalUI.Event.TableEntry
	(*TerminalUI_Event_TableRow)(nil),        // 78: hashicorp.waypoint.sdk.TerminalUI.Event.TableRow
	(*TerminalUI_Event_Table)(nil),           // 79: hashicorp.waypoint.sdk.TerminalUI.Event.Table
	(*TerminalUI_Event_StepGroup)(nil),       // 80: hashicorp.waypoint.sdk.TerminalUI.Event.StepGroup
	(*TerminalUI_Event_Step)(nil),            // 81: hashicorp.waypoint.sdk.TerminalUI.Event.Step
	(*Map_Request)(nil),                      // 82: hashicorp.waypoint.sdk.Map.Request
	(*Map_Response)(nil),                     // 83: hashicorp.waypoint.sdk.Map.Response
	(*Map_ListResponse)(nil),                 // 84: hashicorp.waypoint.sdk.Map.ListResponse
	(*Build_Resp)(nil),                       // 85: hashicorp.waypoint.sdk.Build.Resp
	nil,                                      // 86: hashicorp.waypoint.sdk.Build.Resp.LabelsEntry
	(*DefaultReleaser_Resp)(nil),             // 87: hashicorp.waypoint.sdk.DefaultReleaser.Resp
	(*Deploy_Resp)(nil),                      // 88: hashicorp.waypoint.sdk.Deploy.Resp
	(*Push_Resp)(nil),                        // 89: hashicorp.waypoint.sdk.Push.Resp
	(*Access_Resp)(nil),                      // 90: hashicorp.waypoint.sdk.Access.Resp
	(*Release_Resp)(nil),                     // 91: hashicorp.waypoint.sdk.Release.Resp
	(*ConfigSource_ReadResponse)(nil),        // 92: hashicorp.waypoint.sdk.ConfigSource.ReadResponse
	(*ConfigSource_Value)(nil),               // 93: hashicorp.waypoint.sdk.ConfigSource.Value
	(*TaskLaunch_Resp)(nil),                  // 94: hashicorp.waypoint.sdk.TaskLaunch.Resp
	(*timestamppb.Timestamp)(nil),            // 95: google.protobuf.Timestamp
	(*anypb.Any)(nil),                        // 96: google.protobuf.Any
	(*protostructure.Struct)(nil),            // 97: protostructure.Struct
	(*status.Status)(nil),                    // 98: google.rpc.Status
	(*emptypb.Empty)(nil),                    // 99: google.protobuf.Empty
}
var file_plugin_proto_depIdxs = []int32{
	45,  // 0: hashicorp.waypoint.sdk.FuncSpec.args:type_name -> hashicorp.waypoint.sdk.FuncSpec.Value
	45,  // 1: hashicorp.waypoint.sdk.FuncSpec.result:type_name -> hashicorp.waypoint.sdk.FuncSpec.Value
	60,  // 2: hashicorp.waypoint.sdk.StatusReport.resources:type_name -> hashicorp.waypoint.sdk.StatusReport.Resource
	2,   // 3: hashicorp.waypoint.sdk.StatusReport.health:type_name -> hashicorp.waypoint.sdk.StatusReport.Health
	95,  // 4: hashicorp.waypoint.sdk.StatusReport.generated_time:type_name -> google.protobuf.Timestamp
	96,  // 5: hashicorp.waypoint.sdk.DeclaredResource.state:type_name -> google.protobuf.Any
	0,   // 6: hashicorp.waypoint.sdk.DeclaredResource.category_display_hint:type_name -> hashicorp.waypoint.sdk.ResourceCategoryDisplayHint
	21,  // 7: hashicorp.waypoint.sdk.DeclaredResources.resources:type_name -> hashicorp.waypoint.sdk.DeclaredResource
	42,  // 8: hashicorp.waypoint.sdk.Args.ReleaseTargets.targets:type_name -> hashicorp.waypoint.sdk.Args.ReleaseTargets.Target
	43,  // 9: hashicorp.waypoint.sdk.Args.LabelSet.labels:type_name -> hashicorp.waypoint.sdk.Args.LabelSet.LabelsEntry
	12,  // 10: hashicorp.waypoint.sdk.Args.ExecSessionInfo.initial_window:type_name -> hashicorp.waypoint.sdk.WindowSize
	95,  // 11: hashicorp.waypoint.sdk.Args.LogViewer.starting_at:type_name -> google.protobuf.Timestamp
	44,  // 12: hashicorp.waypoint.sdk.Args.TaskLaunchInfo.environment_variables:type_name -> hashicorp.waypoint.sdk.Args.TaskLaunchInfo.EnvironmentVariablesEntry
	96,  // 13: hashicorp.waypoint.sdk.Args.ReleaseTargets.Target.deployment:type_name -> google.protobuf.Any
	1,   // 14: hashicorp.waypoint.sdk.FuncSpec.Value.primitive_type:type_name -> hashicorp.waypoint.sdk.FuncSpec.Value.PrimitiveType
	96,  // 15: hashicorp.waypoint.sdk.FuncSpec.Value.proto_any:type_name -> google.protobuf.Any
	45,  // 16: hashicorp.waypoint.sdk.FuncSpec.Args.args:type_name -> hashicorp.waypoint.sdk.FuncSpec.Value
	97,  // 17: hashicorp.waypoint.sdk.Config.StructResp.struct:type_name -> protostructure.Struct
	49,  // 18: hashicorp.waypoint.sdk.Config.FieldDocumentation.sub_fields:type_name -> hashicorp.waypoint.sdk.Config.FieldDocumentation
	52,  // 19: hashicorp.waypoint.sdk.Config.Documentation.fields:type_name -> hashicorp.waypoint.sdk.Config.Documentation.FieldsEntry
	53,  // 20: hashicorp.waypoint.sdk.Config.Documentation.template_fields:type_name -> hashicorp.waypoint.sdk.Config.Documentation.TemplateFieldsEntry
	54,  // 21: hashicorp.waypoint.sdk.Config.Documentation.request_fields:type_name -> hashicorp.waypoint.sdk.Config.Documentation.RequestFieldsEntry
	50,  // 22: hashicorp.waypoint.sdk.Config.Documentation.mappers:type_name -> hashicorp.waypoint.sdk.Config.MapperDocumentation
	49,  // 23: hashicorp.waypoint.sdk.Config.Documentation.FieldsEntry.value:type_name -> hashicorp.waypoint.sdk.Config.FieldDocumentation
	49,  // 24: hashicorp.waypoint.sdk.Config.Documentation.TemplateFieldsEntry.value:type_name -> hashicorp.waypoint.sdk.Config.FieldDocumentation
	49,  // 25: hashicorp.waypoint.sdk.Config.Documentation.RequestFieldsEntry.value:type_name -> hashicorp.waypoint.sdk.Config.FieldDocumentation
	58,  // 26: hashicorp.waypoint.sdk.Framework.ResourceManagerState.resources:type_name -> hashicorp.waypoint.sdk.Framework.ResourceState
	96,  // 27: hashicorp.waypoint.sdk.Framework.ResourceState.raw:type_name -> google.protobuf.Any
	59,  // 28: hashicorp.waypoint.sdk.StatusReport.Resource.declared_resource:type_name -> hashicorp.waypoint.sdk.Ref.DeclaredResource
	0,   // 29: hashicorp.waypoint.sdk.StatusReport.Resource.category_display_hint:type_name -> hashicorp.waypoint.sdk.ResourceCategoryDisplayHint
	95,  // 30: hashicorp.waypoint.sdk.StatusReport.Resource.created_time:type_name -> google.protobuf.Timestamp
	2,   // 31: hashicorp.waypoint.sdk.StatusReport.Resource.health:type_name -> hashicorp.waypoint.sdk.StatusReport.Health
	12,  // 32: hashicorp.waypoint.sdk.ExecSession.InputRequest.window_size:type_name -> hashicorp.waypoint.sdk.WindowSize
	65,  // 33: hashicorp.waypoint.sdk.Logs.NextBatchResp.events:type_name -> hashicorp.waypoint.sdk.Logs.Event
	95,  // 34: hashicorp.waypoint.sdk.Logs.Event.timestamp:type_name -> google.protobuf.Timestamp
	71,  // 35: hashicorp.waypoint.sdk.TerminalUI.Response.input:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.InputResp
	73,  // 36: hashicorp.waypoint.sdk.TerminalUI.Event.line:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.Line
	72,  // 37: hashicorp.waypoint.sdk.TerminalUI.Event.status:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.Status
	76,  // 38: hashicorp.waypoint.sdk.TerminalUI.Event.named_values:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.NamedValues
	74,  // 39: hashicorp.waypoint.sdk.TerminalUI.Event.raw:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.Raw
	79,  // 40: hashicorp.waypoint.sdk.TerminalUI.Event.table:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.Table
	80,  // 41: hashicorp.waypoint.sdk.TerminalUI.Event.step_group:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.StepGroup
	81,  // 42: hashicorp.waypoint.sdk.TerminalUI.Event.step:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.Step
	70,  // 43: hashicorp.waypoint.sdk.TerminalUI.Event.input:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.Input
	98,  // 44: hashicorp.waypoint.sdk.TerminalUI.Event.InputResp.error:type_name -> google.rpc.Status
	75,  // 45: hashicorp.waypoint.sdk.TerminalUI.Event.NamedValues.values:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.NamedValue
	77,  // 46: hashicorp.waypoint.sdk.TerminalUI.Event.TableRow.entries:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.TableEntry
	78,  // 47: hashicorp.waypoint.sdk.TerminalUI.Event.Table.rows:type_name -> hashicorp.waypoint.sdk.TerminalUI.Event.TableRow
	46,  // 48: hashicorp.waypoint.sdk.Map.Request.args:type_name -> hashicorp.waypoint.sdk.FuncSpec.Args
	96,  // 49: hashicorp.waypoint.sdk.Map.Response.result:type_name -> google.protobuf.Any
	4,   // 50: hashicorp.waypoint.sdk.Map.ListResponse.funcs:type_name -> hashicorp.waypoint.sdk.FuncSpec
	96,  // 51: hashicorp.waypoint.sdk.Build.Resp.result:type_name -> google.protobuf.Any
	86,  // 52: hashicorp.waypoint.sdk.Build.Resp.labels:type_name -> hashicorp.waypoint.sdk.Build.Resp.LabelsEntry
	96,  // 53: hashicorp.waypoint.sdk.Deploy.Resp.result:type_name -> google.protobuf.Any
	20,  // 54: hashicorp.waypoint.sdk.Deploy.Resp.deployment:type_name -> hashicorp.waypoint.sdk.Deploy
	22,  // 55: hashicorp.waypoint.sdk.Deploy.Resp.declared_resources:type_name -> hashicorp.waypoint.sdk.DeclaredResources
	96,  // 56: hashicorp.waypoint.sdk.Push.Resp.result:type_name -> google.protobuf.Any
	96,  // 57: hashicorp.waypoint.sdk.Access.Resp.result:type_name -> google.protobuf.Any
	96,  // 58: hashicorp.waypoint.sdk.Release.Resp.result:type_name -> google.protobuf.Any
	25,  // 59: hashicorp.waypoint.sdk.Release.Resp.release:type_name -> hashicorp.waypoint.sdk.Release
	22,  // 60: hashicorp.waypoint.sdk.Release.Resp.declared_resources:type_name -> hashicorp.waypoint.sdk.DeclaredResources
	93,  // 61: hashicorp.waypoint.sdk.ConfigSource.ReadResponse.values:type_name -> hashicorp.waypoint.sdk.ConfigSource.Value
	98,  // 62: hashicorp.waypoint.sdk.ConfigSource.Value.error:type_name -> google.rpc.Status
	96,  // 63: hashicorp.waypoint.sdk.TaskLaunch.Resp.result:type_name -> google.protobuf.Any
	61,  // 64: hashicorp.waypoint.sdk.ExecSessionService.Output:input_type -> hashicorp.waypoint.sdk.ExecSession.OutputRequest
	99,  // 65: hashicorp.waypoint.sdk.ExecSessionService.Input:input_type -> google.protobuf.Empty
	64,  // 66: hashicorp.waypoint.sdk.LogViewer.NextLogBatch:input_type -> hashicorp.waypoint.sdk.Logs.NextBatchResp
	67,  // 67: hashicorp.waypoint.sdk.TerminalUIService.Output:input_type -> hashicorp.waypoint.sdk.TerminalUI.OutputRequest
	69,  // 68: hashicorp.waypoint.sdk.TerminalUIService.Events:input_type -> hashicorp.waypoint.sdk.TerminalUI.Event
	99,  // 69: hashicorp.waypoint.sdk.TerminalUIService.IsInteractive:input_type -> google.protobuf.Empty
	99,  // 70: hashicorp.waypoint.sdk.Mapper.ListMappers:input_type -> google.protobuf.Empty
	82,  // 71: hashicorp.waypoint.sdk.Mapper.Map:input_type -> hashicorp.waypoint.sdk.Map.Request
	99,  // 72: hashicorp.waypoint.sdk.Builder.IsAuthenticator:input_type -> google.protobuf.Empty
	46,  // 73: hashicorp.waypoint.sdk.Builder.Auth:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 74: hashicorp.waypoint.sdk.Builder.AuthSpec:input_type -> google.protobuf.Empty
	46,  // 75: hashicorp.waypoint.sdk.Builder.ValidateAuth:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 76: hashicorp.waypoint.sdk.Builder.ValidateAuthSpec:input_type -> google.protobuf.Empty
	99,  // 77: hashicorp.waypoint.sdk.Builder.ConfigStruct:input_type -> google.protobuf.Empty
	47,  // 78: hashicorp.waypoint.sdk.Builder.Configure:input_type -> hashicorp.waypoint.sdk.Config.ConfigureRequest
	99,  // 79: hashicorp.waypoint.sdk.Builder.Documentation:input_type -> google.protobuf.Empty
	99,  // 80: hashicorp.waypoint.sdk.Builder.BuildSpec:input_type -> google.protobuf.Empty
	46,  // 81: hashicorp.waypoint.sdk.Builder.Build:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	46,  // 82: hashicorp.waypoint.sdk.Builder.BuildODR:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 83: hashicorp.waypoint.sdk.Builder.BuildSpecODR:input_type -> google.protobuf.Empty
	99,  // 84: hashicorp.waypoint.sdk.Platform.IsAuthenticator:input_type -> google.protobuf.Empty
	46,  // 85: hashicorp.waypoint.sdk.Platform.Auth:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 86: hashicorp.waypoint.sdk.Platform.AuthSpec:input_type -> google.protobuf.Empty
	46,  // 87: hashicorp.waypoint.sdk.Platform.ValidateAuth:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 88: hashicorp.waypoint.sdk.Platform.ValidateAuthSpec:input_type -> google.protobuf.Empty
	99,  // 89: hashicorp.waypoint.sdk.Platform.ConfigStruct:input_type -> google.protobuf.Empty
	47,  // 90: hashicorp.waypoint.sdk.Platform.Configure:input_type -> hashicorp.waypoint.sdk.Config.ConfigureRequest
	99,  // 91: hashicorp.waypoint.sdk.Platform.Documentation:input_type -> google.protobuf.Empty
	99,  // 92: hashicorp.waypoint.sdk.Platform.DeploySpec:input_type -> google.protobuf.Empty
	46,  // 93: hashicorp.waypoint.sdk.Platform.Deploy:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 94: hashicorp.waypoint.sdk.Platform.DefaultReleaserSpec:input_type -> google.protobuf.Empty
	46,  // 95: hashicorp.waypoint.sdk.Platform.DefaultReleaser:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 96: hashicorp.waypoint.sdk.Platform.IsDestroyer:input_type -> google.protobuf.Empty
	99,  // 97: hashicorp.waypoint.sdk.Platform.DestroySpec:input_type -> google.protobuf.Empty
	46,  // 98: hashicorp.waypoint.sdk.Platform.Destroy:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 99: hashicorp.waypoint.sdk.Platform.IsWorkspaceDestroyer:input_type -> google.protobuf.Empty
	99,  // 100: hashicorp.waypoint.sdk.Platform.DestroyWorkspaceSpec:input_type -> google.protobuf.Empty
	46,  // 101: hashicorp.waypoint.sdk.Platform.DestroyWorkspace:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 102: hashicorp.waypoint.sdk.Platform.IsExecer:input_type -> google.protobuf.Empty
	99,  // 103: hashicorp.waypoint.sdk.Platform.ExecSpec:input_type -> google.protobuf.Empty
	46,  // 104: hashicorp.waypoint.sdk.Platform.Exec:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 105: hashicorp.waypoint.sdk.Platform.IsLogPlatform:input_type -> google.protobuf.Empty
	99,  // 106: hashicorp.waypoint.sdk.Platform.LogsSpec:input_type -> google.protobuf.Empty
	46,  // 107: hashicorp.waypoint.sdk.Platform.Logs:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 108: hashicorp.waypoint.sdk.Platform.IsGeneration:input_type -> google.protobuf.Empty
	99,  // 109: hashicorp.waypoint.sdk.Platform.GenerationSpec:input_type -> google.protobuf.Empty
	46,  // 110: hashicorp.waypoint.sdk.Platform.Generation:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 111: hashicorp.waypoint.sdk.Platform.IsStatus:input_type -> google.protobuf.Empty
	99,  // 112: hashicorp.waypoint.sdk.Platform.StatusSpec:input_type -> google.protobuf.Empty
	46,  // 113: hashicorp.waypoint.sdk.Platform.Status:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 114: hashicorp.waypoint.sdk.Registry.IsAuthenticator:input_type -> google.protobuf.Empty
	46,  // 115: hashicorp.waypoint.sdk.Registry.Auth:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 116: hashicorp.waypoint.sdk.Registry.AuthSpec:input_type -> google.protobuf.Empty
	46,  // 117: hashicorp.waypoint.sdk.Registry.ValidateAuth:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 118: hashicorp.waypoint.sdk.Registry.ValidateAuthSpec:input_type -> google.protobuf.Empty
	99,  // 119: hashicorp.waypoint.sdk.Registry.ConfigStruct:input_type -> google.protobuf.Empty
	47,  // 120: hashicorp.waypoint.sdk.Registry.Configure:input_type -> hashicorp.waypoint.sdk.Config.ConfigureRequest
	99,  // 121: hashicorp.waypoint.sdk.Registry.Documentation:input_type -> google.protobuf.Empty
	99,  // 122: hashicorp.waypoint.sdk.Registry.PushSpec:input_type -> google.protobuf.Empty
	46,  // 123: hashicorp.waypoint.sdk.Registry.Push:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 124: hashicorp.waypoint.sdk.Registry.AccessSpec:input_type -> google.protobuf.Empty
	46,  // 125: hashicorp.waypoint.sdk.Registry.Access:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 126: hashicorp.waypoint.sdk.ReleaseManager.IsAuthenticator:input_type -> google.protobuf.Empty
	46,  // 127: hashicorp.waypoint.sdk.ReleaseManager.Auth:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 128: hashicorp.waypoint.sdk.ReleaseManager.AuthSpec:input_type -> google.protobuf.Empty
	46,  // 129: hashicorp.waypoint.sdk.ReleaseManager.ValidateAuth:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 130: hashicorp.waypoint.sdk.ReleaseManager.ValidateAuthSpec:input_type -> google.protobuf.Empty
	99,  // 131: hashicorp.waypoint.sdk.ReleaseManager.ConfigStruct:input_type -> google.protobuf.Empty
	47,  // 132: hashicorp.waypoint.sdk.ReleaseManager.Configure:input_type -> hashicorp.waypoint.sdk.Config.ConfigureRequest
	99,  // 133: hashicorp.waypoint.sdk.ReleaseManager.Documentation:input_type -> google.protobuf.Empty
	99,  // 134: hashicorp.waypoint.sdk.ReleaseManager.IsDestroyer:input_type -> google.protobuf.Empty
	99,  // 135: hashicorp.waypoint.sdk.ReleaseManager.DestroySpec:input_type -> google.protobuf.Empty
	46,  // 136: hashicorp.waypoint.sdk.ReleaseManager.Destroy:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 137: hashicorp.waypoint.sdk.ReleaseManager.IsWorkspaceDestroyer:input_type -> google.protobuf.Empty
	99,  // 138: hashicorp.waypoint.sdk.ReleaseManager.DestroyWorkspaceSpec:input_type -> google.protobuf.Empty
	46,  // 139: hashicorp.waypoint.sdk.ReleaseManager.DestroyWorkspace:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 140: hashicorp.waypoint.sdk.ReleaseManager.ReleaseSpec:input_type -> google.protobuf.Empty
	46,  // 141: hashicorp.waypoint.sdk.ReleaseManager.Release:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 142: hashicorp.waypoint.sdk.ReleaseManager.IsStatus:input_type -> google.protobuf.Empty
	99,  // 143: hashicorp.waypoint.sdk.ReleaseManager.StatusSpec:input_type -> google.protobuf.Empty
	46,  // 144: hashicorp.waypoint.sdk.ReleaseManager.Status:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 145: hashicorp.waypoint.sdk.ConfigSourcer.ConfigStruct:input_type -> google.protobuf.Empty
	47,  // 146: hashicorp.waypoint.sdk.ConfigSourcer.Configure:input_type -> hashicorp.waypoint.sdk.Config.ConfigureRequest
	99,  // 147: hashicorp.waypoint.sdk.ConfigSourcer.Documentation:input_type -> google.protobuf.Empty
	99,  // 148: hashicorp.waypoint.sdk.ConfigSourcer.ReadSpec:input_type -> google.protobuf.Empty
	46,  // 149: hashicorp.waypoint.sdk.ConfigSourcer.Read:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 150: hashicorp.waypoint.sdk.ConfigSourcer.StopSpec:input_type -> google.protobuf.Empty
	46,  // 151: hashicorp.waypoint.sdk.ConfigSourcer.Stop:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 152: hashicorp.waypoint.sdk.TaskLauncher.ConfigStruct:input_type -> google.protobuf.Empty
	47,  // 153: hashicorp.waypoint.sdk.TaskLauncher.Configure:input_type -> hashicorp.waypoint.sdk.Config.ConfigureRequest
	99,  // 154: hashicorp.waypoint.sdk.TaskLauncher.Documentation:input_type -> google.protobuf.Empty
	99,  // 155: hashicorp.waypoint.sdk.TaskLauncher.StartSpec:input_type -> google.protobuf.Empty
	99,  // 156: hashicorp.waypoint.sdk.TaskLauncher.StopSpec:input_type -> google.protobuf.Empty
	46,  // 157: hashicorp.waypoint.sdk.TaskLauncher.StartTask:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	46,  // 158: hashicorp.waypoint.sdk.TaskLauncher.StopTask:input_type -> hashicorp.waypoint.sdk.FuncSpec.Args
	99,  // 159: hashicorp.waypoint.sdk.ExecSessionService.Output:output_type -> google.protobuf.Empty
	62,  // 160: hashicorp.waypoint.sdk.ExecSessionService.Input:output_type -> hashicorp.waypoint.sdk.ExecSession.InputRequest
	99,  // 161: hashicorp.waypoint.sdk.LogViewer.NextLogBatch:output_type -> google.protobuf.Empty
	99,  // 162: hashicorp.waypoint.sdk.TerminalUIService.Output:output_type -> google.protobuf.Empty
	68,  // 163: hashicorp.waypoint.sdk.TerminalUIService.Events:output_type -> hashicorp.waypoint.sdk.TerminalUI.Response
	66,  // 164: hashicorp.waypoint.sdk.TerminalUIService.IsInteractive:output_type -> hashicorp.waypoint.sdk.TerminalUI.IsInteractiveResponse
	84,  // 165: hashicorp.waypoint.sdk.Mapper.ListMappers:output_type -> hashicorp.waypoint.sdk.Map.ListResponse
	83,  // 166: hashicorp.waypoint.sdk.Mapper.Map:output_type -> hashicorp.waypoint.sdk.Map.Response
	8,   // 167: hashicorp.waypoint.sdk.Builder.IsAuthenticator:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	55,  // 168: hashicorp.waypoint.sdk.Builder.Auth:output_type -> hashicorp.waypoint.sdk.Auth.AuthResponse
	4,   // 169: hashicorp.waypoint.sdk.Builder.AuthSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	99,  // 170: hashicorp.waypoint.sdk.Builder.ValidateAuth:output_type -> google.protobuf.Empty
	4,   // 171: hashicorp.waypoint.sdk.Builder.ValidateAuthSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	48,  // 172: hashicorp.waypoint.sdk.Builder.ConfigStruct:output_type -> hashicorp.waypoint.sdk.Config.StructResp
	99,  // 173: hashicorp.waypoint.sdk.Builder.Configure:output_type -> google.protobuf.Empty
	51,  // 174: hashicorp.waypoint.sdk.Builder.Documentation:output_type -> hashicorp.waypoint.sdk.Config.Documentation
	4,   // 175: hashicorp.waypoint.sdk.Builder.BuildSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	85,  // 176: hashicorp.waypoint.sdk.Builder.Build:output_type -> hashicorp.waypoint.sdk.Build.Resp
	85,  // 177: hashicorp.waypoint.sdk.Builder.BuildODR:output_type -> hashicorp.waypoint.sdk.Build.Resp
	4,   // 178: hashicorp.waypoint.sdk.Builder.BuildSpecODR:output_type -> hashicorp.waypoint.sdk.FuncSpec
	8,   // 179: hashicorp.waypoint.sdk.Platform.IsAuthenticator:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	55,  // 180: hashicorp.waypoint.sdk.Platform.Auth:output_type -> hashicorp.waypoint.sdk.Auth.AuthResponse
	4,   // 181: hashicorp.waypoint.sdk.Platform.AuthSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	99,  // 182: hashicorp.waypoint.sdk.Platform.ValidateAuth:output_type -> google.protobuf.Empty
	4,   // 183: hashicorp.waypoint.sdk.Platform.ValidateAuthSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	48,  // 184: hashicorp.waypoint.sdk.Platform.ConfigStruct:output_type -> hashicorp.waypoint.sdk.Config.StructResp
	99,  // 185: hashicorp.waypoint.sdk.Platform.Configure:output_type -> google.protobuf.Empty
	51,  // 186: hashicorp.waypoint.sdk.Platform.Documentation:output_type -> hashicorp.waypoint.sdk.Config.Documentation
	4,   // 187: hashicorp.waypoint.sdk.Platform.DeploySpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	88,  // 188: hashicorp.waypoint.sdk.Platform.Deploy:output_type -> hashicorp.waypoint.sdk.Deploy.Resp
	4,   // 189: hashicorp.waypoint.sdk.Platform.DefaultReleaserSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	87,  // 190: hashicorp.waypoint.sdk.Platform.DefaultReleaser:output_type -> hashicorp.waypoint.sdk.DefaultReleaser.Resp
	8,   // 191: hashicorp.waypoint.sdk.Platform.IsDestroyer:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	4,   // 192: hashicorp.waypoint.sdk.Platform.DestroySpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	99,  // 193: hashicorp.waypoint.sdk.Platform.Destroy:output_type -> google.protobuf.Empty
	8,   // 194: hashicorp.waypoint.sdk.Platform.IsWorkspaceDestroyer:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	4,   // 195: hashicorp.waypoint.sdk.Platform.DestroyWorkspaceSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	99,  // 196: hashicorp.waypoint.sdk.Platform.DestroyWorkspace:output_type -> google.protobuf.Empty
	8,   // 197: hashicorp.waypoint.sdk.Platform.IsExecer:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	4,   // 198: hashicorp.waypoint.sdk.Platform.ExecSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	14,  // 199: hashicorp.waypoint.sdk.Platform.Exec:output_type -> hashicorp.waypoint.sdk.ExecResult
	8,   // 200: hashicorp.waypoint.sdk.Platform.IsLogPlatform:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	4,   // 201: hashicorp.waypoint.sdk.Platform.LogsSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	99,  // 202: hashicorp.waypoint.sdk.Platform.Logs:output_type -> google.protobuf.Empty
	8,   // 203: hashicorp.waypoint.sdk.Platform.IsGeneration:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	4,   // 204: hashicorp.waypoint.sdk.Platform.GenerationSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	56,  // 205: hashicorp.waypoint.sdk.Platform.Generation:output_type -> hashicorp.waypoint.sdk.Generation.Resp
	8,   // 206: hashicorp.waypoint.sdk.Platform.IsStatus:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	4,   // 207: hashicorp.waypoint.sdk.Platform.StatusSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	11,  // 208: hashicorp.waypoint.sdk.Platform.Status:output_type -> hashicorp.waypoint.sdk.StatusReport
	8,   // 209: hashicorp.waypoint.sdk.Registry.IsAuthenticator:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	55,  // 210: hashicorp.waypoint.sdk.Registry.Auth:output_type -> hashicorp.waypoint.sdk.Auth.AuthResponse
	4,   // 211: hashicorp.waypoint.sdk.Registry.AuthSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	99,  // 212: hashicorp.waypoint.sdk.Registry.ValidateAuth:output_type -> google.protobuf.Empty
	4,   // 213: hashicorp.waypoint.sdk.Registry.ValidateAuthSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	48,  // 214: hashicorp.waypoint.sdk.Registry.ConfigStruct:output_type -> hashicorp.waypoint.sdk.Config.StructResp
	99,  // 215: hashicorp.waypoint.sdk.Registry.Configure:output_type -> google.protobuf.Empty
	51,  // 216: hashicorp.waypoint.sdk.Registry.Documentation:output_type -> hashicorp.waypoint.sdk.Config.Documentation
	4,   // 217: hashicorp.waypoint.sdk.Registry.PushSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	89,  // 218: hashicorp.waypoint.sdk.Registry.Push:output_type -> hashicorp.waypoint.sdk.Push.Resp
	4,   // 219: hashicorp.waypoint.sdk.Registry.AccessSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	90,  // 220: hashicorp.waypoint.sdk.Registry.Access:output_type -> hashicorp.waypoint.sdk.Access.Resp
	8,   // 221: hashicorp.waypoint.sdk.ReleaseManager.IsAuthenticator:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	55,  // 222: hashicorp.waypoint.sdk.ReleaseManager.Auth:output_type -> hashicorp.waypoint.sdk.Auth.AuthResponse
	4,   // 223: hashicorp.waypoint.sdk.ReleaseManager.AuthSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	99,  // 224: hashicorp.waypoint.sdk.ReleaseManager.ValidateAuth:output_type -> google.protobuf.Empty
	4,   // 225: hashicorp.waypoint.sdk.ReleaseManager.ValidateAuthSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	48,  // 226: hashicorp.waypoint.sdk.ReleaseManager.ConfigStruct:output_type -> hashicorp.waypoint.sdk.Config.StructResp
	99,  // 227: hashicorp.waypoint.sdk.ReleaseManager.Configure:output_type -> google.protobuf.Empty
	51,  // 228: hashicorp.waypoint.sdk.ReleaseManager.Documentation:output_type -> hashicorp.waypoint.sdk.Config.Documentation
	8,   // 229: hashicorp.waypoint.sdk.ReleaseManager.IsDestroyer:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	4,   // 230: hashicorp.waypoint.sdk.ReleaseManager.DestroySpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	99,  // 231: hashicorp.waypoint.sdk.ReleaseManager.Destroy:output_type -> google.protobuf.Empty
	8,   // 232: hashicorp.waypoint.sdk.ReleaseManager.IsWorkspaceDestroyer:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	4,   // 233: hashicorp.waypoint.sdk.ReleaseManager.DestroyWorkspaceSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	99,  // 234: hashicorp.waypoint.sdk.ReleaseManager.DestroyWorkspace:output_type -> google.protobuf.Empty
	4,   // 235: hashicorp.waypoint.sdk.ReleaseManager.ReleaseSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	91,  // 236: hashicorp.waypoint.sdk.ReleaseManager.Release:output_type -> hashicorp.waypoint.sdk.Release.Resp
	8,   // 237: hashicorp.waypoint.sdk.ReleaseManager.IsStatus:output_type -> hashicorp.waypoint.sdk.ImplementsResp
	4,   // 238: hashicorp.waypoint.sdk.ReleaseManager.StatusSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	11,  // 239: hashicorp.waypoint.sdk.ReleaseManager.Status:output_type -> hashicorp.waypoint.sdk.StatusReport
	48,  // 240: hashicorp.waypoint.sdk.ConfigSourcer.ConfigStruct:output_type -> hashicorp.waypoint.sdk.Config.StructResp
	99,  // 241: hashicorp.waypoint.sdk.ConfigSourcer.Configure:output_type -> google.protobuf.Empty
	51,  // 242: hashicorp.waypoint.sdk.ConfigSourcer.Documentation:output_type -> hashicorp.waypoint.sdk.Config.Documentation
	4,   // 243: hashicorp.waypoint.sdk.ConfigSourcer.ReadSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	92,  // 244: hashicorp.waypoint.sdk.ConfigSourcer.Read:output_type -> hashicorp.waypoint.sdk.ConfigSource.ReadResponse
	4,   // 245: hashicorp.waypoint.sdk.ConfigSourcer.StopSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	99,  // 246: hashicorp.waypoint.sdk.ConfigSourcer.Stop:output_type -> google.protobuf.Empty
	48,  // 247: hashicorp.waypoint.sdk.TaskLauncher.ConfigStruct:output_type -> hashicorp.waypoint.sdk.Config.StructResp
	99,  // 248: hashicorp.waypoint.sdk.TaskLauncher.Configure:output_type -> google.protobuf.Empty
	51,  // 249: hashicorp.waypoint.sdk.TaskLauncher.Documentation:output_type -> hashicorp.waypoint.sdk.Config.Documentation
	4,   // 250: hashicorp.waypoint.sdk.TaskLauncher.StartSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	4,   // 251: hashicorp.waypoint.sdk.TaskLauncher.StopSpec:output_type -> hashicorp.waypoint.sdk.FuncSpec
	94,  // 252: hashicorp.waypoint.sdk.TaskLauncher.StartTask:output_type -> hashicorp.waypoint.sdk.TaskLaunch.Resp
	99,  // 253: hashicorp.waypoint.sdk.TaskLauncher.StopTask:output_type -> google.protobuf.Empty
	159, // [159:254] is the sub-list for method output_type
	64,  // [64:159] is the sub-list for method input_type
	64,  // [64:64] is the sub-list for extension type_name
	64,  // [64:64] is the sub-list for extension extendee
	0,   // [0:64] is the sub-list for field type_name
}

func init() { file_plugin_proto_init() }
func file_plugin_proto_init() {
	if File_plugin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Generation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Framework); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultReleaser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclaredResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclaredResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Push); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Access); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLaunch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_JobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_DeploymentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_DataDir); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_Logger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_TerminalUI); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_ReleaseTargets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_LabelSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_ExecSessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_LogViewer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_TaskLaunchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_DataDir_Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_DataDir_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_DataDir_Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Args_ReleaseTargets_Target); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncSpec_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncSpec_Args); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_ConfigureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_StructResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_FieldDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_MapperDocumentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Documentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auth_AuthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Generation_Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Framework_ResourceManagerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Framework_ResourceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ref_DeclaredResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusReport_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecSession_OutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecSession_InputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logs_Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logs_NextBatchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logs_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_IsInteractiveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_OutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_InputResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_Raw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_NamedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_NamedValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_TableEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_TableRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_StepGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminalUI_Event_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map_ListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build_Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultReleaser_Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deploy_Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Push_Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Access_Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Release_Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSource_ReadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigSource_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskLaunch_Resp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plugin_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*FuncSpec_Value_ProtoAny)(nil),
		(*FuncSpec_Value_Bool)(nil),
		(*FuncSpec_Value_Int)(nil),
		(*FuncSpec_Value_Uint)(nil),
		(*FuncSpec_Value_String_)(nil),
	}
	file_plugin_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*ExecSession_InputRequest_Data)(nil),
		(*ExecSession_InputRequest_WindowSize)(nil),
		(*ExecSession_InputRequest_InputClosed)(nil),
	}
	file_plugin_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*TerminalUI_Response_Input)(nil),
	}
	file_plugin_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*TerminalUI_Event_Line_)(nil),
		(*TerminalUI_Event_Status_)(nil),
		(*TerminalUI_Event_NamedValues_)(nil),
		(*TerminalUI_Event_Raw_)(nil),
		(*TerminalUI_Event_Table_)(nil),
		(*TerminalUI_Event_StepGroup_)(nil),
		(*TerminalUI_Event_Step_)(nil),
		(*TerminalUI_Event_Input_)(nil),
	}
	file_plugin_proto_msgTypes[90].OneofWrappers = []interface{}{
		(*ConfigSource_Value_Error)(nil),
		(*ConfigSource_Value_Value)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   92,
			NumExtensions: 0,
			NumServices:   10,
		},
		GoTypes:           file_plugin_proto_goTypes,
		DependencyIndexes: file_plugin_proto_depIdxs,
		EnumInfos:         file_plugin_proto_enumTypes,
		MessageInfos:      file_plugin_proto_msgTypes,
	}.Build()
	File_plugin_proto = out.File
	file_plugin_proto_rawDesc = nil
	file_plugin_proto_goTypes = nil
	file_plugin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExecSessionServiceClient is the client API for ExecSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecSessionServiceClient interface {
	Output(ctx context.Context, in *ExecSession_OutputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Input(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ExecSessionService_InputClient, error)
}

type execSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExecSessionServiceClient(cc grpc.ClientConnInterface) ExecSessionServiceClient {
	return &execSessionServiceClient{cc}
}

func (c *execSessionServiceClient) Output(ctx context.Context, in *ExecSession_OutputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ExecSessionService/Output", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execSessionServiceClient) Input(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ExecSessionService_InputClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ExecSessionService_serviceDesc.Streams[0], "/hashicorp.waypoint.sdk.ExecSessionService/Input", opts...)
	if err != nil {
		return nil, err
	}
	x := &execSessionServiceInputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExecSessionService_InputClient interface {
	Recv() (*ExecSession_InputRequest, error)
	grpc.ClientStream
}

type execSessionServiceInputClient struct {
	grpc.ClientStream
}

func (x *execSessionServiceInputClient) Recv() (*ExecSession_InputRequest, error) {
	m := new(ExecSession_InputRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExecSessionServiceServer is the server API for ExecSessionService service.
type ExecSessionServiceServer interface {
	Output(context.Context, *ExecSession_OutputRequest) (*emptypb.Empty, error)
	Input(*emptypb.Empty, ExecSessionService_InputServer) error
}

// UnimplementedExecSessionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExecSessionServiceServer struct {
}

func (*UnimplementedExecSessionServiceServer) Output(context.Context, *ExecSession_OutputRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (*UnimplementedExecSessionServiceServer) Input(*emptypb.Empty, ExecSessionService_InputServer) error {
	return status1.Errorf(codes.Unimplemented, "method Input not implemented")
}

func RegisterExecSessionServiceServer(s *grpc.Server, srv ExecSessionServiceServer) {
	s.RegisterService(&_ExecSessionService_serviceDesc, srv)
}

func _ExecSessionService_Output_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecSession_OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecSessionServiceServer).Output(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ExecSessionService/Output",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecSessionServiceServer).Output(ctx, req.(*ExecSession_OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecSessionService_Input_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExecSessionServiceServer).Input(m, &execSessionServiceInputServer{stream})
}

type ExecSessionService_InputServer interface {
	Send(*ExecSession_InputRequest) error
	grpc.ServerStream
}

type execSessionServiceInputServer struct {
	grpc.ServerStream
}

func (x *execSessionServiceInputServer) Send(m *ExecSession_InputRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _ExecSessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.sdk.ExecSessionService",
	HandlerType: (*ExecSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Output",
			Handler:    _ExecSessionService_Output_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Input",
			Handler:       _ExecSessionService_Input_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

// LogViewerClient is the client API for LogViewer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogViewerClient interface {
	NextLogBatch(ctx context.Context, opts ...grpc.CallOption) (LogViewer_NextLogBatchClient, error)
}

type logViewerClient struct {
	cc grpc.ClientConnInterface
}

func NewLogViewerClient(cc grpc.ClientConnInterface) LogViewerClient {
	return &logViewerClient{cc}
}

func (c *logViewerClient) NextLogBatch(ctx context.Context, opts ...grpc.CallOption) (LogViewer_NextLogBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogViewer_serviceDesc.Streams[0], "/hashicorp.waypoint.sdk.LogViewer/NextLogBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &logViewerNextLogBatchClient{stream}
	return x, nil
}

type LogViewer_NextLogBatchClient interface {
	Send(*Logs_NextBatchResp) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type logViewerNextLogBatchClient struct {
	grpc.ClientStream
}

func (x *logViewerNextLogBatchClient) Send(m *Logs_NextBatchResp) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logViewerNextLogBatchClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogViewerServer is the server API for LogViewer service.
type LogViewerServer interface {
	NextLogBatch(LogViewer_NextLogBatchServer) error
}

// UnimplementedLogViewerServer can be embedded to have forward compatible implementations.
type UnimplementedLogViewerServer struct {
}

func (*UnimplementedLogViewerServer) NextLogBatch(LogViewer_NextLogBatchServer) error {
	return status1.Errorf(codes.Unimplemented, "method NextLogBatch not implemented")
}

func RegisterLogViewerServer(s *grpc.Server, srv LogViewerServer) {
	s.RegisterService(&_LogViewer_serviceDesc, srv)
}

func _LogViewer_NextLogBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogViewerServer).NextLogBatch(&logViewerNextLogBatchServer{stream})
}

type LogViewer_NextLogBatchServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*Logs_NextBatchResp, error)
	grpc.ServerStream
}

type logViewerNextLogBatchServer struct {
	grpc.ServerStream
}

func (x *logViewerNextLogBatchServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logViewerNextLogBatchServer) Recv() (*Logs_NextBatchResp, error) {
	m := new(Logs_NextBatchResp)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LogViewer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.sdk.LogViewer",
	HandlerType: (*LogViewerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NextLogBatch",
			Handler:       _LogViewer_NextLogBatch_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

// TerminalUIServiceClient is the client API for TerminalUIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TerminalUIServiceClient interface {
	Output(ctx context.Context, in *TerminalUI_OutputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Events(ctx context.Context, opts ...grpc.CallOption) (TerminalUIService_EventsClient, error)
	IsInteractive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TerminalUI_IsInteractiveResponse, error)
}

type terminalUIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerminalUIServiceClient(cc grpc.ClientConnInterface) TerminalUIServiceClient {
	return &terminalUIServiceClient{cc}
}

func (c *terminalUIServiceClient) Output(ctx context.Context, in *TerminalUI_OutputRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.TerminalUIService/Output", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalUIServiceClient) Events(ctx context.Context, opts ...grpc.CallOption) (TerminalUIService_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TerminalUIService_serviceDesc.Streams[0], "/hashicorp.waypoint.sdk.TerminalUIService/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &terminalUIServiceEventsClient{stream}
	return x, nil
}

type TerminalUIService_EventsClient interface {
	Send(*TerminalUI_Event) error
	Recv() (*TerminalUI_Response, error)
	grpc.ClientStream
}

type terminalUIServiceEventsClient struct {
	grpc.ClientStream
}

func (x *terminalUIServiceEventsClient) Send(m *TerminalUI_Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *terminalUIServiceEventsClient) Recv() (*TerminalUI_Response, error) {
	m := new(TerminalUI_Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *terminalUIServiceClient) IsInteractive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TerminalUI_IsInteractiveResponse, error) {
	out := new(TerminalUI_IsInteractiveResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.TerminalUIService/IsInteractive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalUIServiceServer is the server API for TerminalUIService service.
type TerminalUIServiceServer interface {
	Output(context.Context, *TerminalUI_OutputRequest) (*emptypb.Empty, error)
	Events(TerminalUIService_EventsServer) error
	IsInteractive(context.Context, *emptypb.Empty) (*TerminalUI_IsInteractiveResponse, error)
}

// UnimplementedTerminalUIServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTerminalUIServiceServer struct {
}

func (*UnimplementedTerminalUIServiceServer) Output(context.Context, *TerminalUI_OutputRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (*UnimplementedTerminalUIServiceServer) Events(TerminalUIService_EventsServer) error {
	return status1.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (*UnimplementedTerminalUIServiceServer) IsInteractive(context.Context, *emptypb.Empty) (*TerminalUI_IsInteractiveResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsInteractive not implemented")
}

func RegisterTerminalUIServiceServer(s *grpc.Server, srv TerminalUIServiceServer) {
	s.RegisterService(&_TerminalUIService_serviceDesc, srv)
}

func _TerminalUIService_Output_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalUI_OutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalUIServiceServer).Output(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.TerminalUIService/Output",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalUIServiceServer).Output(ctx, req.(*TerminalUI_OutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalUIService_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TerminalUIServiceServer).Events(&terminalUIServiceEventsServer{stream})
}

type TerminalUIService_EventsServer interface {
	Send(*TerminalUI_Response) error
	Recv() (*TerminalUI_Event, error)
	grpc.ServerStream
}

type terminalUIServiceEventsServer struct {
	grpc.ServerStream
}

func (x *terminalUIServiceEventsServer) Send(m *TerminalUI_Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *terminalUIServiceEventsServer) Recv() (*TerminalUI_Event, error) {
	m := new(TerminalUI_Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TerminalUIService_IsInteractive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalUIServiceServer).IsInteractive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.TerminalUIService/IsInteractive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalUIServiceServer).IsInteractive(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TerminalUIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.sdk.TerminalUIService",
	HandlerType: (*TerminalUIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Output",
			Handler:    _TerminalUIService_Output_Handler,
		},
		{
			MethodName: "IsInteractive",
			Handler:    _TerminalUIService_IsInteractive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _TerminalUIService_Events_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "plugin.proto",
}

// MapperClient is the client API for Mapper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MapperClient interface {
	// ListMappers returns the list of mappers that this plugin supports.
	ListMappers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Map_ListResponse, error)
	// Map executes a mapper.
	Map(ctx context.Context, in *Map_Request, opts ...grpc.CallOption) (*Map_Response, error)
}

type mapperClient struct {
	cc grpc.ClientConnInterface
}

func NewMapperClient(cc grpc.ClientConnInterface) MapperClient {
	return &mapperClient{cc}
}

func (c *mapperClient) ListMappers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Map_ListResponse, error) {
	out := new(Map_ListResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Mapper/ListMappers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapperClient) Map(ctx context.Context, in *Map_Request, opts ...grpc.CallOption) (*Map_Response, error) {
	out := new(Map_Response)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Mapper/Map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapperServer is the server API for Mapper service.
type MapperServer interface {
	// ListMappers returns the list of mappers that this plugin supports.
	ListMappers(context.Context, *emptypb.Empty) (*Map_ListResponse, error)
	// Map executes a mapper.
	Map(context.Context, *Map_Request) (*Map_Response, error)
}

// UnimplementedMapperServer can be embedded to have forward compatible implementations.
type UnimplementedMapperServer struct {
}

func (*UnimplementedMapperServer) ListMappers(context.Context, *emptypb.Empty) (*Map_ListResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListMappers not implemented")
}
func (*UnimplementedMapperServer) Map(context.Context, *Map_Request) (*Map_Response, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Map not implemented")
}

func RegisterMapperServer(s *grpc.Server, srv MapperServer) {
	s.RegisterService(&_Mapper_serviceDesc, srv)
}

func _Mapper_ListMappers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapperServer).ListMappers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Mapper/ListMappers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapperServer).ListMappers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mapper_Map_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Map_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapperServer).Map(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Mapper/Map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapperServer).Map(ctx, req.(*Map_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.sdk.Mapper",
	HandlerType: (*MapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMappers",
			Handler:    _Mapper_ListMappers_Handler,
		},
		{
			MethodName: "Map",
			Handler:    _Mapper_Map_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

// BuilderClient is the client API for Builder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuilderClient interface {
	IsAuthenticator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	Auth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Auth_AuthResponse, error)
	AuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	ValidateAuth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateAuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error)
	BuildSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Build(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Build_Resp, error)
	BuildODR(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Build_Resp, error)
	BuildSpecODR(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
}

type builderClient struct {
	cc grpc.ClientConnInterface
}

func NewBuilderClient(cc grpc.ClientConnInterface) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) IsAuthenticator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/IsAuthenticator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) Auth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Auth_AuthResponse, error) {
	out := new(Auth_AuthResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) AuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/AuthSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) ValidateAuth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/ValidateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) ValidateAuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/ValidateAuthSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error) {
	out := new(Config_Documentation)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/Documentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) BuildSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/BuildSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) Build(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Build_Resp, error) {
	out := new(Build_Resp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/Build", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) BuildODR(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Build_Resp, error) {
	out := new(Build_Resp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/BuildODR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderClient) BuildSpecODR(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Builder/BuildSpecODR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderServer is the server API for Builder service.
type BuilderServer interface {
	IsAuthenticator(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	Auth(context.Context, *FuncSpec_Args) (*Auth_AuthResponse, error)
	AuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	ValidateAuth(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
	ValidateAuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error)
	Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error)
	BuildSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Build(context.Context, *FuncSpec_Args) (*Build_Resp, error)
	BuildODR(context.Context, *FuncSpec_Args) (*Build_Resp, error)
	BuildSpecODR(context.Context, *emptypb.Empty) (*FuncSpec, error)
}

// UnimplementedBuilderServer can be embedded to have forward compatible implementations.
type UnimplementedBuilderServer struct {
}

func (*UnimplementedBuilderServer) IsAuthenticator(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsAuthenticator not implemented")
}
func (*UnimplementedBuilderServer) Auth(context.Context, *FuncSpec_Args) (*Auth_AuthResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedBuilderServer) AuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method AuthSpec not implemented")
}
func (*UnimplementedBuilderServer) ValidateAuth(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateAuth not implemented")
}
func (*UnimplementedBuilderServer) ValidateAuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateAuthSpec not implemented")
}
func (*UnimplementedBuilderServer) ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ConfigStruct not implemented")
}
func (*UnimplementedBuilderServer) Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedBuilderServer) Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Documentation not implemented")
}
func (*UnimplementedBuilderServer) BuildSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BuildSpec not implemented")
}
func (*UnimplementedBuilderServer) Build(context.Context, *FuncSpec_Args) (*Build_Resp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (*UnimplementedBuilderServer) BuildODR(context.Context, *FuncSpec_Args) (*Build_Resp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BuildODR not implemented")
}
func (*UnimplementedBuilderServer) BuildSpecODR(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method BuildSpecODR not implemented")
}

func RegisterBuilderServer(s *grpc.Server, srv BuilderServer) {
	s.RegisterService(&_Builder_serviceDesc, srv)
}

func _Builder_IsAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).IsAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/IsAuthenticator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).IsAuthenticator(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).Auth(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_AuthSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).AuthSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/AuthSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).AuthSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_ValidateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).ValidateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/ValidateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).ValidateAuth(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_ValidateAuthSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).ValidateAuthSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/ValidateAuthSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).ValidateAuthSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).ConfigStruct(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_Documentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).Documentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/Documentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).Documentation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_BuildSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).BuildSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/BuildSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).BuildSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_Build_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).Build(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/Build",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).Build(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_BuildODR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).BuildODR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/BuildODR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).BuildODR(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Builder_BuildSpecODR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServer).BuildSpecODR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Builder/BuildSpecODR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServer).BuildSpecODR(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Builder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.sdk.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuthenticator",
			Handler:    _Builder_IsAuthenticator_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Builder_Auth_Handler,
		},
		{
			MethodName: "AuthSpec",
			Handler:    _Builder_AuthSpec_Handler,
		},
		{
			MethodName: "ValidateAuth",
			Handler:    _Builder_ValidateAuth_Handler,
		},
		{
			MethodName: "ValidateAuthSpec",
			Handler:    _Builder_ValidateAuthSpec_Handler,
		},
		{
			MethodName: "ConfigStruct",
			Handler:    _Builder_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Builder_Configure_Handler,
		},
		{
			MethodName: "Documentation",
			Handler:    _Builder_Documentation_Handler,
		},
		{
			MethodName: "BuildSpec",
			Handler:    _Builder_BuildSpec_Handler,
		},
		{
			MethodName: "Build",
			Handler:    _Builder_Build_Handler,
		},
		{
			MethodName: "BuildODR",
			Handler:    _Builder_BuildODR_Handler,
		},
		{
			MethodName: "BuildSpecODR",
			Handler:    _Builder_BuildSpecODR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

// PlatformClient is the client API for Platform service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlatformClient interface {
	IsAuthenticator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	Auth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Auth_AuthResponse, error)
	AuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	ValidateAuth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateAuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error)
	DeploySpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Deploy(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Deploy_Resp, error)
	// component.PlatformReleaser optional implementation.
	DefaultReleaserSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	DefaultReleaser(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*DefaultReleaser_Resp, error)
	// component.Destroyer optional implementation
	IsDestroyer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	DestroySpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Destroy(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// component.WorkspaceDestroyer optional implementation
	IsWorkspaceDestroyer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	DestroyWorkspaceSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	DestroyWorkspace(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// component.Execer optional implementation
	IsExecer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	ExecSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Exec(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*ExecResult, error)
	// component.LogViewer optional implementation
	// IsLogPlatform returns true if this platform also implements LogPlatform.
	IsLogPlatform(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	LogsSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Logs(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// component.Generation optional implementation
	IsGeneration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	GenerationSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Generation(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Generation_Resp, error)
	// component.Status optional implementation
	IsStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	StatusSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Status(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*StatusReport, error)
}

type platformClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformClient(cc grpc.ClientConnInterface) PlatformClient {
	return &platformClient{cc}
}

func (c *platformClient) IsAuthenticator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/IsAuthenticator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Auth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Auth_AuthResponse, error) {
	out := new(Auth_AuthResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) AuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/AuthSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) ValidateAuth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/ValidateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) ValidateAuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/ValidateAuthSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error) {
	out := new(Config_Documentation)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/Documentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) DeploySpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/DeploySpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Deploy(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Deploy_Resp, error) {
	out := new(Deploy_Resp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) DefaultReleaserSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/DefaultReleaserSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) DefaultReleaser(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*DefaultReleaser_Resp, error) {
	out := new(DefaultReleaser_Resp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/DefaultReleaser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) IsDestroyer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/IsDestroyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) DestroySpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/DestroySpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Destroy(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) IsWorkspaceDestroyer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/IsWorkspaceDestroyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) DestroyWorkspaceSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/DestroyWorkspaceSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) DestroyWorkspace(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/DestroyWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) IsExecer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/IsExecer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) ExecSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/ExecSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Exec(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*ExecResult, error) {
	out := new(ExecResult)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) IsLogPlatform(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/IsLogPlatform", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) LogsSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/LogsSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Logs(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/Logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) IsGeneration(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/IsGeneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) GenerationSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/GenerationSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Generation(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Generation_Resp, error) {
	out := new(Generation_Resp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/Generation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) IsStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/IsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) StatusSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/StatusSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformClient) Status(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*StatusReport, error) {
	out := new(StatusReport)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Platform/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformServer is the server API for Platform service.
type PlatformServer interface {
	IsAuthenticator(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	Auth(context.Context, *FuncSpec_Args) (*Auth_AuthResponse, error)
	AuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	ValidateAuth(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
	ValidateAuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error)
	Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error)
	DeploySpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Deploy(context.Context, *FuncSpec_Args) (*Deploy_Resp, error)
	// component.PlatformReleaser optional implementation.
	DefaultReleaserSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	DefaultReleaser(context.Context, *FuncSpec_Args) (*DefaultReleaser_Resp, error)
	// component.Destroyer optional implementation
	IsDestroyer(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	DestroySpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Destroy(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
	// component.WorkspaceDestroyer optional implementation
	IsWorkspaceDestroyer(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	DestroyWorkspaceSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	DestroyWorkspace(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
	// component.Execer optional implementation
	IsExecer(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	ExecSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Exec(context.Context, *FuncSpec_Args) (*ExecResult, error)
	// component.LogViewer optional implementation
	// IsLogPlatform returns true if this platform also implements LogPlatform.
	IsLogPlatform(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	LogsSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Logs(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
	// component.Generation optional implementation
	IsGeneration(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	GenerationSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Generation(context.Context, *FuncSpec_Args) (*Generation_Resp, error)
	// component.Status optional implementation
	IsStatus(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	StatusSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Status(context.Context, *FuncSpec_Args) (*StatusReport, error)
}

// UnimplementedPlatformServer can be embedded to have forward compatible implementations.
type UnimplementedPlatformServer struct {
}

func (*UnimplementedPlatformServer) IsAuthenticator(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsAuthenticator not implemented")
}
func (*UnimplementedPlatformServer) Auth(context.Context, *FuncSpec_Args) (*Auth_AuthResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedPlatformServer) AuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method AuthSpec not implemented")
}
func (*UnimplementedPlatformServer) ValidateAuth(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateAuth not implemented")
}
func (*UnimplementedPlatformServer) ValidateAuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateAuthSpec not implemented")
}
func (*UnimplementedPlatformServer) ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ConfigStruct not implemented")
}
func (*UnimplementedPlatformServer) Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedPlatformServer) Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Documentation not implemented")
}
func (*UnimplementedPlatformServer) DeploySpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeploySpec not implemented")
}
func (*UnimplementedPlatformServer) Deploy(context.Context, *FuncSpec_Args) (*Deploy_Resp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (*UnimplementedPlatformServer) DefaultReleaserSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DefaultReleaserSpec not implemented")
}
func (*UnimplementedPlatformServer) DefaultReleaser(context.Context, *FuncSpec_Args) (*DefaultReleaser_Resp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DefaultReleaser not implemented")
}
func (*UnimplementedPlatformServer) IsDestroyer(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsDestroyer not implemented")
}
func (*UnimplementedPlatformServer) DestroySpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DestroySpec not implemented")
}
func (*UnimplementedPlatformServer) Destroy(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (*UnimplementedPlatformServer) IsWorkspaceDestroyer(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsWorkspaceDestroyer not implemented")
}
func (*UnimplementedPlatformServer) DestroyWorkspaceSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DestroyWorkspaceSpec not implemented")
}
func (*UnimplementedPlatformServer) DestroyWorkspace(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DestroyWorkspace not implemented")
}
func (*UnimplementedPlatformServer) IsExecer(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsExecer not implemented")
}
func (*UnimplementedPlatformServer) ExecSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ExecSpec not implemented")
}
func (*UnimplementedPlatformServer) Exec(context.Context, *FuncSpec_Args) (*ExecResult, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Exec not implemented")
}
func (*UnimplementedPlatformServer) IsLogPlatform(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsLogPlatform not implemented")
}
func (*UnimplementedPlatformServer) LogsSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method LogsSpec not implemented")
}
func (*UnimplementedPlatformServer) Logs(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (*UnimplementedPlatformServer) IsGeneration(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsGeneration not implemented")
}
func (*UnimplementedPlatformServer) GenerationSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GenerationSpec not implemented")
}
func (*UnimplementedPlatformServer) Generation(context.Context, *FuncSpec_Args) (*Generation_Resp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Generation not implemented")
}
func (*UnimplementedPlatformServer) IsStatus(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsStatus not implemented")
}
func (*UnimplementedPlatformServer) StatusSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StatusSpec not implemented")
}
func (*UnimplementedPlatformServer) Status(context.Context, *FuncSpec_Args) (*StatusReport, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterPlatformServer(s *grpc.Server, srv PlatformServer) {
	s.RegisterService(&_Platform_serviceDesc, srv)
}

func _Platform_IsAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).IsAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/IsAuthenticator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).IsAuthenticator(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Auth(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_AuthSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).AuthSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/AuthSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).AuthSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_ValidateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).ValidateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/ValidateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).ValidateAuth(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_ValidateAuthSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).ValidateAuthSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/ValidateAuthSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).ValidateAuthSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).ConfigStruct(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Documentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Documentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/Documentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Documentation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_DeploySpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).DeploySpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/DeploySpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).DeploySpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Deploy(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_DefaultReleaserSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).DefaultReleaserSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/DefaultReleaserSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).DefaultReleaserSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_DefaultReleaser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).DefaultReleaser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/DefaultReleaser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).DefaultReleaser(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_IsDestroyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).IsDestroyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/IsDestroyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).IsDestroyer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_DestroySpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).DestroySpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/DestroySpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).DestroySpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Destroy(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_IsWorkspaceDestroyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).IsWorkspaceDestroyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/IsWorkspaceDestroyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).IsWorkspaceDestroyer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_DestroyWorkspaceSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).DestroyWorkspaceSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/DestroyWorkspaceSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).DestroyWorkspaceSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_DestroyWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).DestroyWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/DestroyWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).DestroyWorkspace(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_IsExecer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).IsExecer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/IsExecer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).IsExecer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_ExecSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).ExecSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/ExecSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).ExecSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Exec(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_IsLogPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).IsLogPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/IsLogPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).IsLogPlatform(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_LogsSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).LogsSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/LogsSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).LogsSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/Logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Logs(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_IsGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).IsGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/IsGeneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).IsGeneration(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_GenerationSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).GenerationSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/GenerationSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).GenerationSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Generation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Generation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/Generation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Generation(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_IsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).IsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/IsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).IsStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_StatusSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).StatusSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/StatusSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).StatusSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Platform_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Platform/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServer).Status(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _Platform_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.sdk.Platform",
	HandlerType: (*PlatformServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuthenticator",
			Handler:    _Platform_IsAuthenticator_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Platform_Auth_Handler,
		},
		{
			MethodName: "AuthSpec",
			Handler:    _Platform_AuthSpec_Handler,
		},
		{
			MethodName: "ValidateAuth",
			Handler:    _Platform_ValidateAuth_Handler,
		},
		{
			MethodName: "ValidateAuthSpec",
			Handler:    _Platform_ValidateAuthSpec_Handler,
		},
		{
			MethodName: "ConfigStruct",
			Handler:    _Platform_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Platform_Configure_Handler,
		},
		{
			MethodName: "Documentation",
			Handler:    _Platform_Documentation_Handler,
		},
		{
			MethodName: "DeploySpec",
			Handler:    _Platform_DeploySpec_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _Platform_Deploy_Handler,
		},
		{
			MethodName: "DefaultReleaserSpec",
			Handler:    _Platform_DefaultReleaserSpec_Handler,
		},
		{
			MethodName: "DefaultReleaser",
			Handler:    _Platform_DefaultReleaser_Handler,
		},
		{
			MethodName: "IsDestroyer",
			Handler:    _Platform_IsDestroyer_Handler,
		},
		{
			MethodName: "DestroySpec",
			Handler:    _Platform_DestroySpec_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Platform_Destroy_Handler,
		},
		{
			MethodName: "IsWorkspaceDestroyer",
			Handler:    _Platform_IsWorkspaceDestroyer_Handler,
		},
		{
			MethodName: "DestroyWorkspaceSpec",
			Handler:    _Platform_DestroyWorkspaceSpec_Handler,
		},
		{
			MethodName: "DestroyWorkspace",
			Handler:    _Platform_DestroyWorkspace_Handler,
		},
		{
			MethodName: "IsExecer",
			Handler:    _Platform_IsExecer_Handler,
		},
		{
			MethodName: "ExecSpec",
			Handler:    _Platform_ExecSpec_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Platform_Exec_Handler,
		},
		{
			MethodName: "IsLogPlatform",
			Handler:    _Platform_IsLogPlatform_Handler,
		},
		{
			MethodName: "LogsSpec",
			Handler:    _Platform_LogsSpec_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _Platform_Logs_Handler,
		},
		{
			MethodName: "IsGeneration",
			Handler:    _Platform_IsGeneration_Handler,
		},
		{
			MethodName: "GenerationSpec",
			Handler:    _Platform_GenerationSpec_Handler,
		},
		{
			MethodName: "Generation",
			Handler:    _Platform_Generation_Handler,
		},
		{
			MethodName: "IsStatus",
			Handler:    _Platform_IsStatus_Handler,
		},
		{
			MethodName: "StatusSpec",
			Handler:    _Platform_StatusSpec_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Platform_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	IsAuthenticator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	Auth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Auth_AuthResponse, error)
	AuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	ValidateAuth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateAuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error)
	PushSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Push(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Push_Resp, error)
	// Access and AccessSpec are used to provide the optional component.RegistryAccess
	// interface.
	AccessSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Access(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Access_Resp, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) IsAuthenticator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/IsAuthenticator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Auth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Auth_AuthResponse, error) {
	out := new(Auth_AuthResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) AuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/AuthSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ValidateAuth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/ValidateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ValidateAuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/ValidateAuthSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error) {
	out := new(Config_Documentation)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/Documentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) PushSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/PushSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Push(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Push_Resp, error) {
	out := new(Push_Resp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) AccessSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/AccessSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Access(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Access_Resp, error) {
	out := new(Access_Resp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.Registry/Access", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	IsAuthenticator(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	Auth(context.Context, *FuncSpec_Args) (*Auth_AuthResponse, error)
	AuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	ValidateAuth(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
	ValidateAuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error)
	Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error)
	PushSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Push(context.Context, *FuncSpec_Args) (*Push_Resp, error)
	// Access and AccessSpec are used to provide the optional component.RegistryAccess
	// interface.
	AccessSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Access(context.Context, *FuncSpec_Args) (*Access_Resp, error)
}

// UnimplementedRegistryServer can be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (*UnimplementedRegistryServer) IsAuthenticator(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsAuthenticator not implemented")
}
func (*UnimplementedRegistryServer) Auth(context.Context, *FuncSpec_Args) (*Auth_AuthResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedRegistryServer) AuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method AuthSpec not implemented")
}
func (*UnimplementedRegistryServer) ValidateAuth(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateAuth not implemented")
}
func (*UnimplementedRegistryServer) ValidateAuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateAuthSpec not implemented")
}
func (*UnimplementedRegistryServer) ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ConfigStruct not implemented")
}
func (*UnimplementedRegistryServer) Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedRegistryServer) Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Documentation not implemented")
}
func (*UnimplementedRegistryServer) PushSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PushSpec not implemented")
}
func (*UnimplementedRegistryServer) Push(context.Context, *FuncSpec_Args) (*Push_Resp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedRegistryServer) AccessSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method AccessSpec not implemented")
}
func (*UnimplementedRegistryServer) Access(context.Context, *FuncSpec_Args) (*Access_Resp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Access not implemented")
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_IsAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).IsAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/IsAuthenticator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).IsAuthenticator(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Auth(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_AuthSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).AuthSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/AuthSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).AuthSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ValidateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ValidateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/ValidateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ValidateAuth(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ValidateAuthSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ValidateAuthSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/ValidateAuthSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ValidateAuthSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ConfigStruct(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Documentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Documentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/Documentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Documentation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_PushSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).PushSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/PushSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).PushSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Push(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_AccessSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).AccessSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/AccessSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).AccessSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Access_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Access(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.Registry/Access",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Access(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.sdk.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuthenticator",
			Handler:    _Registry_IsAuthenticator_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _Registry_Auth_Handler,
		},
		{
			MethodName: "AuthSpec",
			Handler:    _Registry_AuthSpec_Handler,
		},
		{
			MethodName: "ValidateAuth",
			Handler:    _Registry_ValidateAuth_Handler,
		},
		{
			MethodName: "ValidateAuthSpec",
			Handler:    _Registry_ValidateAuthSpec_Handler,
		},
		{
			MethodName: "ConfigStruct",
			Handler:    _Registry_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Registry_Configure_Handler,
		},
		{
			MethodName: "Documentation",
			Handler:    _Registry_Documentation_Handler,
		},
		{
			MethodName: "PushSpec",
			Handler:    _Registry_PushSpec_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Registry_Push_Handler,
		},
		{
			MethodName: "AccessSpec",
			Handler:    _Registry_AccessSpec_Handler,
		},
		{
			MethodName: "Access",
			Handler:    _Registry_Access_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

// ReleaseManagerClient is the client API for ReleaseManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReleaseManagerClient interface {
	IsAuthenticator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	Auth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Auth_AuthResponse, error)
	AuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	ValidateAuth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateAuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error)
	// component.Destroyer optional implementation
	IsDestroyer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	DestroySpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Destroy(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// component.WorkspaceDestroyer optional implementation
	IsWorkspaceDestroyer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	DestroyWorkspaceSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	DestroyWorkspace(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReleaseSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Release(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Release_Resp, error)
	// component.Status optional implementation
	IsStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error)
	StatusSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Status(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*StatusReport, error)
}

type releaseManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewReleaseManagerClient(cc grpc.ClientConnInterface) ReleaseManagerClient {
	return &releaseManagerClient{cc}
}

func (c *releaseManagerClient) IsAuthenticator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/IsAuthenticator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) Auth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Auth_AuthResponse, error) {
	out := new(Auth_AuthResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) AuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/AuthSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) ValidateAuth(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/ValidateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) ValidateAuthSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/ValidateAuthSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error) {
	out := new(Config_Documentation)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/Documentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) IsDestroyer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/IsDestroyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) DestroySpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/DestroySpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) Destroy(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) IsWorkspaceDestroyer(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/IsWorkspaceDestroyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) DestroyWorkspaceSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/DestroyWorkspaceSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) DestroyWorkspace(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/DestroyWorkspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) ReleaseSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/ReleaseSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) Release(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*Release_Resp, error) {
	out := new(Release_Resp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) IsStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ImplementsResp, error) {
	out := new(ImplementsResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/IsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) StatusSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/StatusSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseManagerClient) Status(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*StatusReport, error) {
	out := new(StatusReport)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ReleaseManager/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseManagerServer is the server API for ReleaseManager service.
type ReleaseManagerServer interface {
	IsAuthenticator(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	Auth(context.Context, *FuncSpec_Args) (*Auth_AuthResponse, error)
	AuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	ValidateAuth(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
	ValidateAuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error)
	Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error)
	// component.Destroyer optional implementation
	IsDestroyer(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	DestroySpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Destroy(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
	// component.WorkspaceDestroyer optional implementation
	IsWorkspaceDestroyer(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	DestroyWorkspaceSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	DestroyWorkspace(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
	ReleaseSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Release(context.Context, *FuncSpec_Args) (*Release_Resp, error)
	// component.Status optional implementation
	IsStatus(context.Context, *emptypb.Empty) (*ImplementsResp, error)
	StatusSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Status(context.Context, *FuncSpec_Args) (*StatusReport, error)
}

// UnimplementedReleaseManagerServer can be embedded to have forward compatible implementations.
type UnimplementedReleaseManagerServer struct {
}

func (*UnimplementedReleaseManagerServer) IsAuthenticator(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsAuthenticator not implemented")
}
func (*UnimplementedReleaseManagerServer) Auth(context.Context, *FuncSpec_Args) (*Auth_AuthResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedReleaseManagerServer) AuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method AuthSpec not implemented")
}
func (*UnimplementedReleaseManagerServer) ValidateAuth(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateAuth not implemented")
}
func (*UnimplementedReleaseManagerServer) ValidateAuthSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ValidateAuthSpec not implemented")
}
func (*UnimplementedReleaseManagerServer) ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ConfigStruct not implemented")
}
func (*UnimplementedReleaseManagerServer) Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedReleaseManagerServer) Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Documentation not implemented")
}
func (*UnimplementedReleaseManagerServer) IsDestroyer(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsDestroyer not implemented")
}
func (*UnimplementedReleaseManagerServer) DestroySpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DestroySpec not implemented")
}
func (*UnimplementedReleaseManagerServer) Destroy(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (*UnimplementedReleaseManagerServer) IsWorkspaceDestroyer(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsWorkspaceDestroyer not implemented")
}
func (*UnimplementedReleaseManagerServer) DestroyWorkspaceSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DestroyWorkspaceSpec not implemented")
}
func (*UnimplementedReleaseManagerServer) DestroyWorkspace(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DestroyWorkspace not implemented")
}
func (*UnimplementedReleaseManagerServer) ReleaseSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ReleaseSpec not implemented")
}
func (*UnimplementedReleaseManagerServer) Release(context.Context, *FuncSpec_Args) (*Release_Resp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (*UnimplementedReleaseManagerServer) IsStatus(context.Context, *emptypb.Empty) (*ImplementsResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method IsStatus not implemented")
}
func (*UnimplementedReleaseManagerServer) StatusSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StatusSpec not implemented")
}
func (*UnimplementedReleaseManagerServer) Status(context.Context, *FuncSpec_Args) (*StatusReport, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterReleaseManagerServer(s *grpc.Server, srv ReleaseManagerServer) {
	s.RegisterService(&_ReleaseManager_serviceDesc, srv)
}

func _ReleaseManager_IsAuthenticator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).IsAuthenticator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/IsAuthenticator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).IsAuthenticator(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).Auth(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_AuthSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).AuthSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/AuthSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).AuthSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_ValidateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).ValidateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/ValidateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).ValidateAuth(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_ValidateAuthSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).ValidateAuthSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/ValidateAuthSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).ValidateAuthSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).ConfigStruct(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_Documentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).Documentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/Documentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).Documentation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_IsDestroyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).IsDestroyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/IsDestroyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).IsDestroyer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_DestroySpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).DestroySpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/DestroySpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).DestroySpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).Destroy(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_IsWorkspaceDestroyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).IsWorkspaceDestroyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/IsWorkspaceDestroyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).IsWorkspaceDestroyer(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_DestroyWorkspaceSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).DestroyWorkspaceSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/DestroyWorkspaceSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).DestroyWorkspaceSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_DestroyWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).DestroyWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/DestroyWorkspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).DestroyWorkspace(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_ReleaseSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).ReleaseSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/ReleaseSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).ReleaseSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).Release(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_IsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).IsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/IsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).IsStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_StatusSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).StatusSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/StatusSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).StatusSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseManager_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseManagerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ReleaseManager/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseManagerServer).Status(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReleaseManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.sdk.ReleaseManager",
	HandlerType: (*ReleaseManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAuthenticator",
			Handler:    _ReleaseManager_IsAuthenticator_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _ReleaseManager_Auth_Handler,
		},
		{
			MethodName: "AuthSpec",
			Handler:    _ReleaseManager_AuthSpec_Handler,
		},
		{
			MethodName: "ValidateAuth",
			Handler:    _ReleaseManager_ValidateAuth_Handler,
		},
		{
			MethodName: "ValidateAuthSpec",
			Handler:    _ReleaseManager_ValidateAuthSpec_Handler,
		},
		{
			MethodName: "ConfigStruct",
			Handler:    _ReleaseManager_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _ReleaseManager_Configure_Handler,
		},
		{
			MethodName: "Documentation",
			Handler:    _ReleaseManager_Documentation_Handler,
		},
		{
			MethodName: "IsDestroyer",
			Handler:    _ReleaseManager_IsDestroyer_Handler,
		},
		{
			MethodName: "DestroySpec",
			Handler:    _ReleaseManager_DestroySpec_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ReleaseManager_Destroy_Handler,
		},
		{
			MethodName: "IsWorkspaceDestroyer",
			Handler:    _ReleaseManager_IsWorkspaceDestroyer_Handler,
		},
		{
			MethodName: "DestroyWorkspaceSpec",
			Handler:    _ReleaseManager_DestroyWorkspaceSpec_Handler,
		},
		{
			MethodName: "DestroyWorkspace",
			Handler:    _ReleaseManager_DestroyWorkspace_Handler,
		},
		{
			MethodName: "ReleaseSpec",
			Handler:    _ReleaseManager_ReleaseSpec_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _ReleaseManager_Release_Handler,
		},
		{
			MethodName: "IsStatus",
			Handler:    _ReleaseManager_IsStatus_Handler,
		},
		{
			MethodName: "StatusSpec",
			Handler:    _ReleaseManager_StatusSpec_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _ReleaseManager_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

// ConfigSourcerClient is the client API for ConfigSourcer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigSourcerClient interface {
	ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error)
	ReadSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Read(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*ConfigSource_ReadResponse, error)
	StopSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	Stop(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type configSourcerClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigSourcerClient(cc grpc.ClientConnInterface) ConfigSourcerClient {
	return &configSourcerClient{cc}
}

func (c *configSourcerClient) ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ConfigSourcer/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSourcerClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ConfigSourcer/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSourcerClient) Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error) {
	out := new(Config_Documentation)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ConfigSourcer/Documentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSourcerClient) ReadSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ConfigSourcer/ReadSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSourcerClient) Read(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*ConfigSource_ReadResponse, error) {
	out := new(ConfigSource_ReadResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ConfigSourcer/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSourcerClient) StopSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ConfigSourcer/StopSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configSourcerClient) Stop(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.ConfigSourcer/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigSourcerServer is the server API for ConfigSourcer service.
type ConfigSourcerServer interface {
	ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error)
	Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error)
	ReadSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Read(context.Context, *FuncSpec_Args) (*ConfigSource_ReadResponse, error)
	StopSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	Stop(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
}

// UnimplementedConfigSourcerServer can be embedded to have forward compatible implementations.
type UnimplementedConfigSourcerServer struct {
}

func (*UnimplementedConfigSourcerServer) ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ConfigStruct not implemented")
}
func (*UnimplementedConfigSourcerServer) Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedConfigSourcerServer) Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Documentation not implemented")
}
func (*UnimplementedConfigSourcerServer) ReadSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ReadSpec not implemented")
}
func (*UnimplementedConfigSourcerServer) Read(context.Context, *FuncSpec_Args) (*ConfigSource_ReadResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedConfigSourcerServer) StopSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StopSpec not implemented")
}
func (*UnimplementedConfigSourcerServer) Stop(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterConfigSourcerServer(s *grpc.Server, srv ConfigSourcerServer) {
	s.RegisterService(&_ConfigSourcer_serviceDesc, srv)
}

func _ConfigSourcer_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSourcerServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ConfigSourcer/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSourcerServer).ConfigStruct(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSourcer_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSourcerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ConfigSourcer/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSourcerServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSourcer_Documentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSourcerServer).Documentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ConfigSourcer/Documentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSourcerServer).Documentation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSourcer_ReadSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSourcerServer).ReadSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ConfigSourcer/ReadSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSourcerServer).ReadSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSourcer_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSourcerServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ConfigSourcer/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSourcerServer).Read(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSourcer_StopSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSourcerServer).StopSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ConfigSourcer/StopSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSourcerServer).StopSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigSourcer_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSourcerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.ConfigSourcer/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSourcerServer).Stop(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigSourcer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.sdk.ConfigSourcer",
	HandlerType: (*ConfigSourcerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigStruct",
			Handler:    _ConfigSourcer_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _ConfigSourcer_Configure_Handler,
		},
		{
			MethodName: "Documentation",
			Handler:    _ConfigSourcer_Documentation_Handler,
		},
		{
			MethodName: "ReadSpec",
			Handler:    _ConfigSourcer_ReadSpec_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _ConfigSourcer_Read_Handler,
		},
		{
			MethodName: "StopSpec",
			Handler:    _ConfigSourcer_StopSpec_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ConfigSourcer_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

// TaskLauncherClient is the client API for TaskLauncher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskLauncherClient interface {
	ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error)
	Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error)
	StartSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	StopSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error)
	StartTask(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*TaskLaunch_Resp, error)
	StopTask(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskLauncherClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskLauncherClient(cc grpc.ClientConnInterface) TaskLauncherClient {
	return &taskLauncherClient{cc}
}

func (c *taskLauncherClient) ConfigStruct(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_StructResp, error) {
	out := new(Config_StructResp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.TaskLauncher/ConfigStruct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLauncherClient) Configure(ctx context.Context, in *Config_ConfigureRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.TaskLauncher/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLauncherClient) Documentation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config_Documentation, error) {
	out := new(Config_Documentation)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.TaskLauncher/Documentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLauncherClient) StartSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.TaskLauncher/StartSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLauncherClient) StopSpec(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FuncSpec, error) {
	out := new(FuncSpec)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.TaskLauncher/StopSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLauncherClient) StartTask(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*TaskLaunch_Resp, error) {
	out := new(TaskLaunch_Resp)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.TaskLauncher/StartTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskLauncherClient) StopTask(ctx context.Context, in *FuncSpec_Args, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hashicorp.waypoint.sdk.TaskLauncher/StopTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskLauncherServer is the server API for TaskLauncher service.
type TaskLauncherServer interface {
	ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error)
	Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error)
	Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error)
	StartSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	StopSpec(context.Context, *emptypb.Empty) (*FuncSpec, error)
	StartTask(context.Context, *FuncSpec_Args) (*TaskLaunch_Resp, error)
	StopTask(context.Context, *FuncSpec_Args) (*emptypb.Empty, error)
}

// UnimplementedTaskLauncherServer can be embedded to have forward compatible implementations.
type UnimplementedTaskLauncherServer struct {
}

func (*UnimplementedTaskLauncherServer) ConfigStruct(context.Context, *emptypb.Empty) (*Config_StructResp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ConfigStruct not implemented")
}
func (*UnimplementedTaskLauncherServer) Configure(context.Context, *Config_ConfigureRequest) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (*UnimplementedTaskLauncherServer) Documentation(context.Context, *emptypb.Empty) (*Config_Documentation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Documentation not implemented")
}
func (*UnimplementedTaskLauncherServer) StartSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StartSpec not implemented")
}
func (*UnimplementedTaskLauncherServer) StopSpec(context.Context, *emptypb.Empty) (*FuncSpec, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StopSpec not implemented")
}
func (*UnimplementedTaskLauncherServer) StartTask(context.Context, *FuncSpec_Args) (*TaskLaunch_Resp, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StartTask not implemented")
}
func (*UnimplementedTaskLauncherServer) StopTask(context.Context, *FuncSpec_Args) (*emptypb.Empty, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StopTask not implemented")
}

func RegisterTaskLauncherServer(s *grpc.Server, srv TaskLauncherServer) {
	s.RegisterService(&_TaskLauncher_serviceDesc, srv)
}

func _TaskLauncher_ConfigStruct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLauncherServer).ConfigStruct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.TaskLauncher/ConfigStruct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLauncherServer).ConfigStruct(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLauncher_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLauncherServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.TaskLauncher/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLauncherServer).Configure(ctx, req.(*Config_ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLauncher_Documentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLauncherServer).Documentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.TaskLauncher/Documentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLauncherServer).Documentation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLauncher_StartSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLauncherServer).StartSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.TaskLauncher/StartSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLauncherServer).StartSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLauncher_StopSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLauncherServer).StopSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.TaskLauncher/StopSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLauncherServer).StopSpec(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLauncher_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLauncherServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.TaskLauncher/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLauncherServer).StartTask(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskLauncher_StopTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FuncSpec_Args)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskLauncherServer).StopTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.waypoint.sdk.TaskLauncher/StopTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskLauncherServer).StopTask(ctx, req.(*FuncSpec_Args))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskLauncher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.waypoint.sdk.TaskLauncher",
	HandlerType: (*TaskLauncherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigStruct",
			Handler:    _TaskLauncher_ConfigStruct_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _TaskLauncher_Configure_Handler,
		},
		{
			MethodName: "Documentation",
			Handler:    _TaskLauncher_Documentation_Handler,
		},
		{
			MethodName: "StartSpec",
			Handler:    _TaskLauncher_StartSpec_Handler,
		},
		{
			MethodName: "StopSpec",
			Handler:    _TaskLauncher_StopSpec_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _TaskLauncher_StartTask_Handler,
		},
		{
			MethodName: "StopTask",
			Handler:    _TaskLauncher_StopTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
