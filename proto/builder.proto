syntax = "proto3";

package proto;

option go_package = ".;proto";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "plugin.proto";

// Builder service is a builder that takes some set of arguments and produces
// an artifact.
service Builder {
  rpc IsAuthenticator(google.protobuf.Empty) returns (ImplementsResp);
  rpc Auth(FuncSpec.Args) returns (Auth.AuthResponse);
  rpc AuthSpec(google.protobuf.Empty) returns (FuncSpec);
  rpc ValidateAuth(FuncSpec.Args) returns (google.protobuf.Empty);
  rpc ValidateAuthSpec(google.protobuf.Empty) returns (FuncSpec);

  rpc ConfigStruct(google.protobuf.Empty) returns (Config.StructResp);
  rpc Configure(Config.ConfigureRequest) returns (google.protobuf.Empty);
  rpc Documentation(google.protobuf.Empty) returns (Config.Documentation);

  rpc BuildSpec(Empty) returns (FuncSpec);
  rpc Build(FuncSpec.Args) returns (Build.Resp);
}

message Build {
  message Resp {
    google.protobuf.Any result = 1;
    map<string, string> labels = 2;
  }
}
